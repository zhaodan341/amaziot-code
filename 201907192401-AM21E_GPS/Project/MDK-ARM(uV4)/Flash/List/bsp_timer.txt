; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_timer.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_timer.crf ..\..\User\bsp\src\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;454    */
;;;455    void SysTick_Handler(void)
000000  f7ffbffe          B.W      SysTick_ISR
;;;456    {
;;;457    	SysTick_ISR();
;;;458    }
;;;459    
                          ENDP


                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;132    extern void bsp_RunPer10ms(void);
;;;133    void SysTick_ISR(void)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
;;;135    	static uint8_t s_count = 0;
;;;136    	uint8_t i;
;;;137    
;;;138    	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;139    	if (s_uiDelayCount > 0)
000002  4c1b              LDR      r4,|L2.112|
000004  6860              LDR      r0,[r4,#4]  ; s_uiDelayCount
;;;140    	{
;;;141    		if (--s_uiDelayCount == 0)
;;;142    		{
;;;143    			s_ucTimeOutFlag = 1;
000006  2201              MOVS     r2,#1
000008  b120              CBZ      r0,|L2.20|
00000a  6860              LDR      r0,[r4,#4]            ;141  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1              ;141
00000e  6060              STR      r0,[r4,#4]            ;141  ; s_uiDelayCount
000010  d100              BNE      |L2.20|
000012  7022              STRB     r2,[r4,#0]
                  |L2.20|
;;;144    		}
;;;145    	}
;;;146    
;;;147    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;148    	for (i = 0; i < TMR_COUNT; i++)
;;;149    	{
;;;150    		bsp_SoftTimerDec(&s_tTmr[i]);
000014  4b17              LDR      r3,|L2.116|
000016  2100              MOVS     r1,#0                 ;148
                  |L2.24|
000018  eb010041          ADD      r0,r1,r1,LSL #1
00001c  eb030080          ADD      r0,r3,r0,LSL #2
000020  6845              LDR      r5,[r0,#4]
000022  b14d              CBZ      r5,|L2.56|
000024  6845              LDR      r5,[r0,#4]
000026  1e6d              SUBS     r5,r5,#1
000028  6045              STR      r5,[r0,#4]
00002a  d105              BNE      |L2.56|
00002c  7042              STRB     r2,[r0,#1]
00002e  7805              LDRB     r5,[r0,#0]
000030  2d01              CMP      r5,#1
000032  d101              BNE      |L2.56|
000034  6885              LDR      r5,[r0,#8]
000036  6045              STR      r5,[r0,#4]
                  |L2.56|
000038  1c49              ADDS     r1,r1,#1
00003a  b2c9              UXTB     r1,r1                 ;148
00003c  2904              CMP      r1,#4                 ;148
00003e  d3eb              BCC      |L2.24|
;;;151    	}
;;;152    
;;;153    	/* 全局运行时间每1ms增1 */
;;;154    	g_iRunTime++;
000040  68a0              LDR      r0,[r4,#8]  ; g_iRunTime
000042  1c40              ADDS     r0,r0,#1
000044  60a0              STR      r0,[r4,#8]  ; g_iRunTime
;;;155    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
000046  68a0              LDR      r0,[r4,#8]  ; g_iRunTime
000048  f06f4100          MVN      r1,#0x80000000
00004c  2500              MOVS     r5,#0
00004e  4288              CMP      r0,r1
000050  d100              BNE      |L2.84|
;;;156    	{
;;;157    		g_iRunTime = 0;
000052  60a5              STR      r5,[r4,#8]  ; g_iRunTime
                  |L2.84|
;;;158    	}
;;;159    
;;;160    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000054  f7fffffe          BL       bsp_RunPer1ms
;;;161    
;;;162    	if (++s_count >= 10)
000058  7860              LDRB     r0,[r4,#1]  ; s_count
00005a  1c40              ADDS     r0,r0,#1
00005c  b2c0              UXTB     r0,r0
00005e  7060              STRB     r0,[r4,#1]
000060  280a              CMP      r0,#0xa
000062  d304              BCC      |L2.110|
;;;163    	{
;;;164    		s_count = 0;
000064  7065              STRB     r5,[r4,#1]
;;;165    
;;;166    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000066  e8bd4070          POP      {r4-r6,lr}
00006a  f7ffbffe          B.W      bsp_RunPer10ms
                  |L2.110|
;;;167    	}
;;;168    }
00006e  bd70              POP      {r4-r6,pc}
;;;169    
                          ENDP

                  |L2.112|
                          DCD      ||.data||
                  |L2.116|
                          DCD      ||.bss||

                          AREA ||i.TIM2_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM2_IRQHandler PROC
;;;612    #ifdef USE_TIM2
;;;613    void TIM2_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;614    #endif
;;;615    
;;;616    #ifdef USE_TIM3
;;;617    void TIM3_IRQHandler(void)
;;;618    #endif
;;;619    
;;;620    #ifdef USE_TIM4
;;;621    void TIM4_IRQHandler(void)
;;;622    #endif
;;;623    
;;;624    #ifdef USE_TIM5
;;;625    void TIM5_IRQHandler(void)
;;;626    #endif
;;;627    {
;;;628        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC1))
000002  2102              MOVS     r1,#2
000004  074c              LSLS     r4,r1,#29
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       TIM_GetITStatus
;;;629        {
;;;630            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
;;;631            TIM_ITConfig(TIM_HARD, TIM_IT_CC1, DISABLE);	/* 禁能CC1中断 */
;;;632    
;;;633            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;634            s_TIM_CallBack1();
00000c  4d20              LDR      r5,|L3.144|
00000e  b150              CBZ      r0,|L3.38|
000010  2102              MOVS     r1,#2                 ;630
000012  4620              MOV      r0,r4                 ;630
000014  f7fffffe          BL       TIM_ClearITPendingBit
000018  2200              MOVS     r2,#0                 ;631
00001a  2102              MOVS     r1,#2                 ;631
00001c  4620              MOV      r0,r4                 ;631
00001e  f7fffffe          BL       TIM_ITConfig
000022  68e8              LDR      r0,[r5,#0xc]  ; s_TIM_CallBack1
000024  4780              BLX      r0
                  |L3.38|
;;;635        }
;;;636    
;;;637        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC2))
000026  2104              MOVS     r1,#4
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       TIM_GetITStatus
00002e  b150              CBZ      r0,|L3.70|
;;;638        {
;;;639            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
000030  2104              MOVS     r1,#4
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       TIM_ClearITPendingBit
;;;640            TIM_ITConfig(TIM_HARD, TIM_IT_CC2, DISABLE);	/* 禁能CC2中断 */
000038  2200              MOVS     r2,#0
00003a  2104              MOVS     r1,#4
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       TIM_ITConfig
;;;641    
;;;642            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;643            s_TIM_CallBack2();
000042  6928              LDR      r0,[r5,#0x10]  ; s_TIM_CallBack2
000044  4780              BLX      r0
                  |L3.70|
;;;644        }
;;;645    
;;;646        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC3))
000046  2108              MOVS     r1,#8
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       TIM_GetITStatus
00004e  b150              CBZ      r0,|L3.102|
;;;647        {
;;;648            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
000050  2108              MOVS     r1,#8
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       TIM_ClearITPendingBit
;;;649            TIM_ITConfig(TIM_HARD, TIM_IT_CC3, DISABLE);	/* 禁能CC3中断 */
000058  2200              MOVS     r2,#0
00005a  2108              MOVS     r1,#8
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       TIM_ITConfig
;;;650    
;;;651            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;652            s_TIM_CallBack3();
000062  6968              LDR      r0,[r5,#0x14]  ; s_TIM_CallBack3
000064  4780              BLX      r0
                  |L3.102|
;;;653        }
;;;654    
;;;655        if (TIM_GetITStatus(TIM_HARD, TIM_IT_CC4))
000066  2110              MOVS     r1,#0x10
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       TIM_GetITStatus
00006e  2800              CMP      r0,#0
000070  d00c              BEQ      |L3.140|
;;;656        {
;;;657            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000072  2110              MOVS     r1,#0x10
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       TIM_ClearITPendingBit
;;;658            TIM_ITConfig(TIM_HARD, TIM_IT_CC4, DISABLE);	/* 禁能CC4中断 */
00007a  2200              MOVS     r2,#0
00007c  2110              MOVS     r1,#0x10
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       TIM_ITConfig
;;;659    
;;;660            /* 先关闭中断，再执行回调函数。因为回调函数可能需要重启定时器 */
;;;661            s_TIM_CallBack4();
000084  69a8              LDR      r0,[r5,#0x18]  ; s_TIM_CallBack4
000086  e8bd4070          POP      {r4-r6,lr}
00008a  4700              BX       r0
                  |L3.140|
;;;662        }
;;;663    }
00008c  bd70              POP      {r4-r6,pc}
;;;664    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      ||.data||

                          AREA ||i.bsp_CheckRunTime||, CODE, READONLY, ALIGN=2

                  bsp_CheckRunTime PROC
;;;423    */
;;;424    int32_t bsp_CheckRunTime(int32_t _LastTime)
000000  2101              MOVS     r1,#1
000002  f3818810          MSR      PRIMASK,r1
;;;425    {
;;;426    	int32_t now_time;
;;;427    	int32_t time_diff;
;;;428    
;;;429    	DISABLE_INT();  	/* 关中断 */
;;;430    
;;;431    	now_time = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000006  4907              LDR      r1,|L4.36|
000008  6889              LDR      r1,[r1,#8]  ; g_iRunTime
;;;432    
;;;433    	ENABLE_INT();  		/* 开中断 */
00000a  2200              MOVS     r2,#0
00000c  f3828810          MSR      PRIMASK,r2
;;;434    	
;;;435    	if (now_time >= _LastTime)
000010  4281              CMP      r1,r0
000012  db01              BLT      |L4.24|
;;;436    	{
;;;437    		time_diff = now_time - _LastTime;
000014  1a08              SUBS     r0,r1,r0
;;;438    	}
;;;439    	else
;;;440    	{
;;;441    		time_diff = 0x7FFFFFFF - _LastTime + now_time;
;;;442    	}
;;;443    
;;;444    	return time_diff;
;;;445    }
000016  4770              BX       lr
                  |L4.24|
000018  f06f4200          MVN      r2,#0x80000000        ;441
00001c  1a10              SUBS     r0,r2,r0              ;441
00001e  4408              ADD      r0,r0,r1              ;441
000020  4770              BX       lr
;;;446    
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      ||.data||

                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;376    */
;;;377    uint8_t bsp_CheckTimer(uint8_t _id)
000000  2804              CMP      r0,#4
;;;378    {
000002  d207              BCS      |L5.20|
;;;379    	if (_id >= TMR_COUNT)
;;;380    	{
;;;381    		return 0;
;;;382    	}
;;;383    
;;;384    	if (s_tTmr[_id].Flag == 1)
000004  eb000140          ADD      r1,r0,r0,LSL #1
000008  4805              LDR      r0,|L5.32|
00000a  eb000081          ADD      r0,r0,r1,LSL #2
00000e  7841              LDRB     r1,[r0,#1]
000010  2901              CMP      r1,#1
000012  d001              BEQ      |L5.24|
                  |L5.20|
;;;385    	{
;;;386    		s_tTmr[_id].Flag = 0;
;;;387    		return 1;
;;;388    	}
;;;389    	else
;;;390    	{
;;;391    		return 0;
000014  2000              MOVS     r0,#0
;;;392    	}
;;;393    }
000016  4770              BX       lr
                  |L5.24|
000018  2100              MOVS     r1,#0                 ;386
00001a  7041              STRB     r1,[r0,#1]            ;386
00001c  2001              MOVS     r0,#1                 ;387
00001e  4770              BX       lr
;;;394    
                          ENDP

                  |L5.32|
                          DCD      ||.bss||

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=2

                  bsp_DelayMS PROC
;;;203    */
;;;204    void bsp_DelayMS(uint32_t n)
000000  b510              PUSH     {r4,lr}
;;;205    {
000002  2800              CMP      r0,#0
000004  d011              BEQ      |L6.42|
;;;206    	if (n == 0)
;;;207    	{
;;;208    		return;
;;;209    	}
;;;210    	else if (n == 1)
000006  2801              CMP      r0,#1
000008  d100              BNE      |L6.12|
;;;211    	{
;;;212    		n = 2;
00000a  2002              MOVS     r0,#2
                  |L6.12|
;;;213    	}
;;;214    
;;;215    	DISABLE_INT();  			/* 关中断 */
00000c  2101              MOVS     r1,#1
00000e  f3818810          MSR      PRIMASK,r1
;;;216    
;;;217    	s_uiDelayCount = n;
000012  4c06              LDR      r4,|L6.44|
000014  6060              STR      r0,[r4,#4]  ; s_uiDelayCount
;;;218    	s_ucTimeOutFlag = 0;
000016  2000              MOVS     r0,#0
000018  7020              STRB     r0,[r4,#0]
00001a  f3808810          MSR      PRIMASK,r0
;;;219    
;;;220    	ENABLE_INT();  				/* 开中断 */
;;;221    
;;;222    	while (1)
;;;223    	{
;;;224    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
00001e  bf00              NOP      
                  |L6.32|
000020  f7fffffe          BL       bsp_Idle
;;;225    
;;;226    		/*
;;;227    			等待延迟时间到
;;;228    			注意：编译器认为 s_ucTimeOutFlag = 0，所以可能优化错误，因此 s_ucTimeOutFlag 变量必须申明为 volatile
;;;229    		*/
;;;230    		if (s_ucTimeOutFlag == 1)
000024  7820              LDRB     r0,[r4,#0]  ; s_ucTimeOutFlag
000026  2801              CMP      r0,#1
000028  d1fa              BNE      |L6.32|
                  |L6.42|
;;;231    		{
;;;232    			break;
;;;233    		}
;;;234    	}
;;;235    }
00002a  bd10              POP      {r4,pc}
;;;236    
                          ENDP

                  |L6.44|
                          DCD      ||.data||

                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;244    */
;;;245    void bsp_DelayUS(uint32_t n)
000000  b570              PUSH     {r4-r6,lr}
;;;246    {
;;;247        uint32_t ticks;
;;;248        uint32_t told;
;;;249        uint32_t tnow;
;;;250        uint32_t tcnt = 0;
;;;251        uint32_t reload;
;;;252           
;;;253    	reload = SysTick->LOAD;                
000002  f04f23e0          MOV      r3,#0xe000e000
000006  2100              MOVS     r1,#0                 ;250
000008  695d              LDR      r5,[r3,#0x14]
;;;254        ticks = n * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */  
00000a  4a0b              LDR      r2,|L7.56|
00000c  4c0b              LDR      r4,|L7.60|
00000e  6812              LDR      r2,[r2,#0]  ; SystemCoreClock
000010  fbb2f4f4          UDIV     r4,r2,r4
;;;255        
;;;256        tcnt = 0;
;;;257        told = SysTick->VAL;             /* 刚进入时的计数器值 */
000014  699a              LDR      r2,[r3,#0x18]
000016  4344              MULS     r4,r0,r4              ;254
                  |L7.24|
;;;258    
;;;259        while (1)
;;;260        {
;;;261            tnow = SysTick->VAL;    
000018  6998              LDR      r0,[r3,#0x18]
;;;262            if (tnow != told)
00001a  4290              CMP      r0,r2
00001c  d0fc              BEQ      |L7.24|
;;;263            {    
;;;264                /* SYSTICK是一个递减的计数器 */    
;;;265                if (tnow < told)
00001e  d202              BCS      |L7.38|
;;;266                {
;;;267                    tcnt += told - tnow;    
000020  eba20200          SUB      r2,r2,r0
000024  e002              B        |L7.44|
                  |L7.38|
;;;268                }
;;;269                /* 重新装载递减 */
;;;270                else
;;;271                {
;;;272                    tcnt += reload - tnow + told;    
000026  eba50600          SUB      r6,r5,r0
00002a  4432              ADD      r2,r2,r6
                  |L7.44|
00002c  4411              ADD      r1,r1,r2
;;;273                }        
;;;274                told = tnow;
00002e  4602              MOV      r2,r0
;;;275    
;;;276                /* 时间超过/等于要延迟的时间,则退出 */
;;;277                if (tcnt >= ticks)
000030  42a1              CMP      r1,r4
000032  d3f1              BCC      |L7.24|
;;;278                {
;;;279                	break;
;;;280                }
;;;281            }  
;;;282        }
;;;283    } 
000034  bd70              POP      {r4-r6,pc}
;;;284    
                          ENDP

000036  0000              DCW      0x0000
                  |L7.56|
                          DCD      SystemCoreClock
                  |L7.60|
                          DCD      0x000f4240

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;402    */
;;;403    int32_t bsp_GetRunTime(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
;;;404    {
;;;405    	int32_t runtime;
;;;406    
;;;407    	DISABLE_INT();  	/* 关中断 */
;;;408    
;;;409    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000006  4803              LDR      r0,|L8.20|
000008  6880              LDR      r0,[r0,#8]  ; g_iRunTime
;;;410    
;;;411    	ENABLE_INT();  		/* 开中断 */
00000a  2100              MOVS     r1,#0
00000c  f3818810          MSR      PRIMASK,r1
;;;412    
;;;413    	return runtime;
;;;414    }
000010  4770              BX       lr
;;;415    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      ||.data||

                          AREA ||i.bsp_InitHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitHardTimer PROC
;;;469    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;470    void bsp_InitHardTimer(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;471    {
;;;472    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;473    	uint32_t usPeriod;
;;;474    	uint16_t usPrescaler;
;;;475    	uint32_t uiTIMxCLK;
;;;476    
;;;477      	/* 使能TIM时钟 */
;;;478    	RCC_APB1PeriphClockCmd(TIM_HARD_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;479    
;;;480        /*-----------------------------------------------------------------------
;;;481    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;482    
;;;483    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;484    		PCLK2 = HCLK / 2      (APB2Periph)
;;;485    		PCLK1 = HCLK / 4      (APB1Periph)
;;;486    
;;;487    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;488    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;489    
;;;490    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;491    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;492    
;;;493    	----------------------------------------------------------------------- */
;;;494    	uiTIMxCLK = SystemCoreClock / 2;
00000a  4815              LDR      r0,|L9.96|
;;;495    
;;;496    	usPrescaler = uiTIMxCLK / 1000000 ;	/* 分频到周期 1us */
00000c  4915              LDR      r1,|L9.100|
;;;497    	
;;;498    #if defined (USE_TIM2) || defined (USE_TIM5) 
;;;499    	//usPeriod = 0xFFFFFFFF;	/* 407支持32位定时器 */
;;;500    	usPeriod = 0xFFFF;	/* 103支持16位 */
;;;501    #else
;;;502    	usPeriod = 0xFFFF;
;;;503    #endif
;;;504    	/* Time base configuration */
;;;505    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;506    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;507    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
00000e  2400              MOVS     r4,#0
000010  6800              LDR      r0,[r0,#0]            ;494  ; SystemCoreClock
;;;508    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;509    
;;;510    	TIM_TimeBaseInit(TIM_HARD, &TIM_TimeBaseStructure);
000012  f04f4580          MOV      r5,#0x40000000
000016  0840              LSRS     r0,r0,#1              ;494
000018  fbb0f0f1          UDIV     r0,r0,r1              ;496
00001c  f64f71ff          MOV      r1,#0xffff            ;500
000020  f8ad1004          STRH     r1,[sp,#4]            ;505
000024  f8ad0000          STRH     r0,[sp,#0]            ;506
000028  f8ad4006          STRH     r4,[sp,#6]            ;507
00002c  f8ad4002          STRH     r4,[sp,#2]            ;508
000030  4669              MOV      r1,sp
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       TIM_TimeBaseInit
;;;511    
;;;512    	//TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;513    
;;;514    	/* TIMx enable counter */
;;;515    	TIM_Cmd(TIM_HARD, ENABLE);
000038  2101              MOVS     r1,#1
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       TIM_Cmd
;;;516    
;;;517    	/* 配置TIM定时中断 (Update) */
;;;518    	{
;;;519    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;520    
;;;521    		NVIC_InitStructure.NVIC_IRQChannel = TIM_HARD_IRQn;
000040  201c              MOVS     r0,#0x1c
000042  f88d000c          STRB     r0,[sp,#0xc]
;;;522    
;;;523    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 4;	/* 比串口优先级低 */
000046  2004              MOVS     r0,#4
000048  f88d000d          STRB     r0,[sp,#0xd]
;;;524    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00004c  f88d400e          STRB     r4,[sp,#0xe]
;;;525    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000050  2001              MOVS     r0,#1
000052  f88d000f          STRB     r0,[sp,#0xf]
;;;526    		NVIC_Init(&NVIC_InitStructure);
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       NVIC_Init
;;;527    	}
;;;528    }
00005c  bd7f              POP      {r0-r6,pc}
;;;529    
                          ENDP

00005e  0000              DCW      0x0000
                  |L9.96|
                          DCD      SystemCoreClock
                  |L9.100|
                          DCD      0x000f4240

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;90     */
;;;91     void bsp_InitTimer(void)
000000  b430              PUSH     {r4,r5}
;;;92     {
;;;93     	uint8_t i;
;;;94     
;;;95     	/* 清零所有的软件定时器 */
;;;96     	for (i = 0; i < TMR_COUNT; i++)
000002  2000              MOVS     r0,#0
;;;97     	{
;;;98     		s_tTmr[i].Count = 0;
000004  4a13              LDR      r2,|L10.84|
000006  4601              MOV      r1,r0                 ;96
                  |L10.8|
000008  eb000440          ADD      r4,r0,r0,LSL #1
00000c  eb020384          ADD      r3,r2,r4,LSL #2
000010  6059              STR      r1,[r3,#4]
;;;99     		s_tTmr[i].PreLoad = 0;
000012  6099              STR      r1,[r3,#8]
;;;100    		s_tTmr[i].Flag = 0;
000014  7059              STRB     r1,[r3,#1]
;;;101    		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000016  f8021024          STRB     r1,[r2,r4,LSL #2]
00001a  1c40              ADDS     r0,r0,#1
00001c  b2c0              UXTB     r0,r0                 ;96
00001e  2804              CMP      r0,#4                 ;96
000020  d3f2              BCC      |L10.8|
;;;102    	}
;;;103    
;;;104    	/*
;;;105    		配置systic中断周期为1ms，并启动systick中断。
;;;106    
;;;107        	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;108    
;;;109        	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;110    	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;111    	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;112    	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;113    
;;;114        	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;115        */
;;;116    	SysTick_Config(SystemCoreClock / 1000);
000022  480d              LDR      r0,|L10.88|
000024  f44f727a          MOV      r2,#0x3e8
000028  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00002a  fbb0f0f2          UDIV     r0,r0,r2
00002e  f1b07f80          CMP      r0,#0x1000000
000032  d20c              BCS      |L10.78|
000034  f020427f          BIC      r2,r0,#0xff000000
000038  f04f20e0          MOV      r0,#0xe000e000
00003c  1e52              SUBS     r2,r2,#1
00003e  6142              STR      r2,[r0,#0x14]
000040  4b06              LDR      r3,|L10.92|
000042  22f0              MOVS     r2,#0xf0
000044  f8832d14          STRB     r2,[r3,#0xd14]
000048  6181              STR      r1,[r0,#0x18]
00004a  2107              MOVS     r1,#7
00004c  6101              STR      r1,[r0,#0x10]
                  |L10.78|
;;;117    	
;;;118    #if defined (USE_TIM2) || defined (USE_TIM3)  || defined (USE_TIM4)	|| defined (USE_TIM5)
;;;119    	bsp_InitHardTimer();
00004e  bc30              POP      {r4,r5}
000050  f7ffbffe          B.W      bsp_InitHardTimer
;;;120    #endif
;;;121    }
;;;122    
                          ENDP

                  |L10.84|
                          DCD      ||.bss||
                  |L10.88|
                          DCD      SystemCoreClock
                  |L10.92|
                          DCD      0xe000e00f

                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartAutoTimer PROC
;;;322    */
;;;323    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b510              PUSH     {r4,lr}
;;;324    {
;;;325    	if (_id >= TMR_COUNT)
000002  2804              CMP      r0,#4
000004  d305              BCC      |L11.18|
;;;326    	{
;;;327    		/* 打印出错的源代码文件名、函数名称 */
;;;328    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000006  4a0c              LDR      r2,|L11.56|
000008  a10c              ADR      r1,|L11.60|
00000a  a014              ADR      r0,|L11.92|
00000c  f7fffffe          BL       __2printf
                  |L11.16|
;;;329    		while(1); /* 参数异常，死机等待看门狗复位 */
000010  e7fe              B        |L11.16|
                  |L11.18|
;;;330    	}
;;;331    
;;;332    	DISABLE_INT();  		/* 关中断 */
000012  2201              MOVS     r2,#1
000014  f3828810          MSR      PRIMASK,r2
;;;333    
;;;334    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
000018  4a18              LDR      r2,|L11.124|
00001a  eb000340          ADD      r3,r0,r0,LSL #1
00001e  eb020083          ADD      r0,r2,r3,LSL #2
000022  6041              STR      r1,[r0,#4]
;;;335    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
000024  6081              STR      r1,[r0,#8]
;;;336    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000026  2100              MOVS     r1,#0
000028  7041              STRB     r1,[r0,#1]
;;;337    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
00002a  2001              MOVS     r0,#1
00002c  f8020023          STRB     r0,[r2,r3,LSL #2]
000030  f3818810          MSR      PRIMASK,r1
;;;338    
;;;339    	ENABLE_INT();  			/* 开中断 */
;;;340    }
000034  bd10              POP      {r4,pc}
;;;341    
                          ENDP

000036  0000              DCW      0x0000
                  |L11.56|
                          DCD      ||.constdata||+0xf
                  |L11.60|
00003c  2e2e5c2e          DCB      "..\\..\\User\\bsp\\src\\bsp_timer.c",0
000040  2e5c5573
000044  65725c62
000048  73705c73
00004c  72635c62
000050  73705f74
000054  696d6572
000058  2e6300  
00005b  00                DCB      0
                  |L11.92|
00005c  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000060  723a2066
000064  696c6520
000068  25732c20
00006c  66756e63
000070  74696f6e
000074  20257328
000078  290d0a00
                  |L11.124|
                          DCD      ||.bss||

                          AREA ||i.bsp_StartHardTimer||, CODE, READONLY, ALIGN=2

                  bsp_StartHardTimer PROC
;;;542    */
;;;543    void bsp_StartHardTimer(uint8_t _CC, uint32_t _uiTimeOut, void * _pCallBack)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;544    {
000004  4614              MOV      r4,r2
000006  4606              MOV      r6,r0
000008  460d              MOV      r5,r1
;;;545        uint32_t cnt_now;
;;;546        uint32_t cnt_tar;
;;;547    
;;;548        /*
;;;549            执行下面这个语句，时长 = 18us (通过逻辑分析仪测量IO翻转)
;;;550            bsp_StartTimer2(3, 500, (void *)test1);
;;;551        */
;;;552        if (_uiTimeOut < 5)
00000a  2905              CMP      r1,#5
00000c  d300              BCC      |L12.16|
;;;553        {
;;;554            ;
;;;555        }
;;;556        else
;;;557        {
;;;558            _uiTimeOut -= 5;
00000e  1f4d              SUBS     r5,r1,#5
                  |L12.16|
;;;559        }
;;;560    
;;;561        cnt_now = TIM_GetCounter(TIM_HARD);    	/* 读取当前的计数器值 */
000010  f04f4780          MOV      r7,#0x40000000
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       TIM_GetCounter
;;;562        cnt_tar = cnt_now + _uiTimeOut;			/* 计算捕获的计数器值 */
;;;563        if (_CC == 1)
;;;564        {
;;;565            s_TIM_CallBack1 = (void (*)(void))_pCallBack;
00001a  4920              LDR      r1,|L12.156|
00001c  4428              ADD      r0,r0,r5              ;562
00001e  2e01              CMP      r6,#1                 ;563
000020  d015              BEQ      |L12.78|
;;;566    
;;;567            TIM_SetCompare1(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC1 */
;;;568            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC1);
;;;569    		TIM_ITConfig(TIM_HARD, TIM_IT_CC1, ENABLE);	/* 使能CC1中断 */
;;;570    
;;;571        }
;;;572        else if (_CC == 2)
000022  2e02              CMP      r6,#2
000024  d01f              BEQ      |L12.102|
;;;573        {
;;;574    		s_TIM_CallBack2 = (void (*)(void))_pCallBack;
;;;575    
;;;576            TIM_SetCompare2(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC2 */
;;;577    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC2);
;;;578    		TIM_ITConfig(TIM_HARD, TIM_IT_CC2, ENABLE);	/* 使能CC2中断 */
;;;579        }
;;;580        else if (_CC == 3)
000026  2e03              CMP      r6,#3
000028  d029              BEQ      |L12.126|
;;;581        {
;;;582            s_TIM_CallBack3 = (void (*)(void))_pCallBack;
;;;583    
;;;584            TIM_SetCompare3(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC3 */
;;;585            TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC3);
;;;586    		TIM_ITConfig(TIM_HARD, TIM_IT_CC3, ENABLE);	/* 使能CC3中断 */
;;;587        }
;;;588        else if (_CC == 4)
00002a  2e04              CMP      r6,#4
00002c  d133              BNE      |L12.150|
;;;589        {
;;;590            s_TIM_CallBack4 = (void (*)(void))_pCallBack;
;;;591    
;;;592            TIM_SetCompare4(TIM_HARD, cnt_tar);      	/* 设置捕获比较计数器CC4 */
00002e  618c              STR      r4,[r1,#0x18]  ; s_TIM_CallBack4
000030  b281              UXTH     r1,r0
000032  4638              MOV      r0,r7
000034  f7fffffe          BL       TIM_SetCompare4
;;;593    		TIM_ClearITPendingBit(TIM_HARD, TIM_IT_CC4);
000038  2110              MOVS     r1,#0x10
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       TIM_ClearITPendingBit
;;;594    		TIM_ITConfig(TIM_HARD, TIM_IT_CC4, ENABLE);	/* 使能CC4中断 */
000040  2201              MOVS     r2,#1
000042  2110              MOVS     r1,#0x10
                  |L12.68|
000044  4638              MOV      r0,r7
000046  e8bd41f0          POP      {r4-r8,lr}
00004a  f7ffbffe          B.W      TIM_ITConfig
                  |L12.78|
00004e  60cc              STR      r4,[r1,#0xc]          ;567  ; s_TIM_CallBack1
000050  b281              UXTH     r1,r0                 ;567
000052  4638              MOV      r0,r7                 ;567
000054  f7fffffe          BL       TIM_SetCompare1
000058  2102              MOVS     r1,#2                 ;568
00005a  4638              MOV      r0,r7                 ;568
00005c  f7fffffe          BL       TIM_ClearITPendingBit
000060  2201              MOVS     r2,#1                 ;569
000062  2102              MOVS     r1,#2                 ;569
000064  e7ee              B        |L12.68|
                  |L12.102|
000066  610c              STR      r4,[r1,#0x10]         ;576  ; s_TIM_CallBack2
000068  b281              UXTH     r1,r0                 ;576
00006a  4638              MOV      r0,r7                 ;576
00006c  f7fffffe          BL       TIM_SetCompare2
000070  2104              MOVS     r1,#4                 ;577
000072  4638              MOV      r0,r7                 ;577
000074  f7fffffe          BL       TIM_ClearITPendingBit
000078  2201              MOVS     r2,#1                 ;578
00007a  2104              MOVS     r1,#4                 ;578
00007c  e7e2              B        |L12.68|
                  |L12.126|
00007e  614c              STR      r4,[r1,#0x14]         ;584  ; s_TIM_CallBack3
000080  b281              UXTH     r1,r0                 ;584
000082  4638              MOV      r0,r7                 ;584
000084  f7fffffe          BL       TIM_SetCompare3
000088  2108              MOVS     r1,#8                 ;585
00008a  4638              MOV      r0,r7                 ;585
00008c  f7fffffe          BL       TIM_ClearITPendingBit
000090  2201              MOVS     r2,#1                 ;586
000092  2108              MOVS     r1,#8                 ;586
000094  e7d6              B        |L12.68|
                  |L12.150|
;;;595        }
;;;596    	else
;;;597        {
;;;598            return;
;;;599        }
;;;600    }
000096  e8bd81f0          POP      {r4-r8,pc}
;;;601    #endif
                          ENDP

00009a  0000              DCW      0x0000
                  |L12.156|
                          DCD      ||.data||

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartTimer PROC
;;;294    */
;;;295    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b510              PUSH     {r4,lr}
;;;296    {
;;;297    	if (_id >= TMR_COUNT)
000002  2804              CMP      r0,#4
000004  d305              BCC      |L13.18|
;;;298    	{
;;;299    		/* 打印出错的源代码文件名、函数名称 */
;;;300    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000006  4a0b              LDR      r2,|L13.52|
000008  a10b              ADR      r1,|L13.56|
00000a  a013              ADR      r0,|L13.88|
00000c  f7fffffe          BL       __2printf
                  |L13.16|
;;;301    		while(1); /* 参数异常，死机等待看门狗复位 */
000010  e7fe              B        |L13.16|
                  |L13.18|
;;;302    	}
;;;303    
;;;304    	DISABLE_INT();  			/* 关中断 */
000012  2201              MOVS     r2,#1
000014  f3828810          MSR      PRIMASK,r2
;;;305    
;;;306    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
000018  4a17              LDR      r2,|L13.120|
00001a  eb000340          ADD      r3,r0,r0,LSL #1
00001e  eb020083          ADD      r0,r2,r3,LSL #2
000022  6041              STR      r1,[r0,#4]
;;;307    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
000024  6081              STR      r1,[r0,#8]
;;;308    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000026  2100              MOVS     r1,#0
000028  7041              STRB     r1,[r0,#1]
;;;309    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
00002a  f8021023          STRB     r1,[r2,r3,LSL #2]
00002e  f3818810          MSR      PRIMASK,r1
;;;310    
;;;311    	ENABLE_INT();  				/* 开中断 */
;;;312    }
000032  bd10              POP      {r4,pc}
;;;313    
                          ENDP

                  |L13.52|
                          DCD      ||.constdata||
                  |L13.56|
000038  2e2e5c2e          DCB      "..\\..\\User\\bsp\\src\\bsp_timer.c",0
00003c  2e5c5573
000040  65725c62
000044  73705c73
000048  72635c62
00004c  73705f74
000050  696d6572
000054  2e6300  
000057  00                DCB      0
                  |L13.88|
000058  4572726f          DCB      "Error: file %s, function %s()\r\n",0
00005c  723a2066
000060  696c6520
000064  25732c20
000068  66756e63
00006c  74696f6e
000070  20257328
000074  290d0a00
                  |L13.120|
                          DCD      ||.bss||

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StopTimer PROC
;;;349    */
;;;350    void bsp_StopTimer(uint8_t _id)
000000  b510              PUSH     {r4,lr}
;;;351    {
;;;352    	if (_id >= TMR_COUNT)
000002  2804              CMP      r0,#4
000004  d305              BCC      |L14.18|
;;;353    	{
;;;354    		/* 打印出错的源代码文件名、函数名称 */
;;;355    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000006  4a0b              LDR      r2,|L14.52|
000008  a10b              ADR      r1,|L14.56|
00000a  a013              ADR      r0,|L14.88|
00000c  f7fffffe          BL       __2printf
                  |L14.16|
;;;356    		while(1); /* 参数异常，死机等待看门狗复位 */
000010  e7fe              B        |L14.16|
                  |L14.18|
;;;357    	}
;;;358    
;;;359    	DISABLE_INT();  	/* 关中断 */
000012  2101              MOVS     r1,#1
000014  f3818810          MSR      PRIMASK,r1
;;;360    
;;;361    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
000018  4a17              LDR      r2,|L14.120|
00001a  eb000040          ADD      r0,r0,r0,LSL #1
00001e  eb020380          ADD      r3,r2,r0,LSL #2
000022  2100              MOVS     r1,#0
000024  6059              STR      r1,[r3,#4]
;;;362    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000026  7059              STRB     r1,[r3,#1]
;;;363    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
000028  f8021020          STRB     r1,[r2,r0,LSL #2]
00002c  f3818810          MSR      PRIMASK,r1
;;;364    
;;;365    	ENABLE_INT();  		/* 开中断 */
;;;366    }
000030  bd10              POP      {r4,pc}
;;;367    
                          ENDP

000032  0000              DCW      0x0000
                  |L14.52|
                          DCD      ||.constdata||+0x22
                  |L14.56|
000038  2e2e5c2e          DCB      "..\\..\\User\\bsp\\src\\bsp_timer.c",0
00003c  2e5c5573
000040  65725c62
000044  73705c73
000048  72635c62
00004c  73705f74
000050  696d6572
000054  2e6300  
000057  00                DCB      0
                  |L14.88|
000058  4572726f          DCB      "Error: file %s, function %s()\r\n",0
00005c  723a2066
000060  696c6520
000064  25732c20
000068  66756e63
00006c  74696f6e
000070  20257328
000074  290d0a00
                  |L14.120|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6273705f          DCB      0x62,0x73,0x70,0x5f
000004  53746172          DCB      0x53,0x74,0x61,0x72
000008  7454696d          DCB      0x74,0x54,0x69,0x6d
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.49|
00000f  62                DCB      0x62
000010  73705f53          DCB      0x73,0x70,0x5f,0x53
000014  74617274          DCB      0x74,0x61,0x72,0x74
000018  4175746f          DCB      0x41,0x75,0x74,0x6f
00001c  54696d65          DCB      0x54,0x69,0x6d,0x65
000020  7200              DCB      0x72,0x00
                  |symbol_number.50|
000022  6273              DCB      0x62,0x73
000024  705f5374          DCB      0x70,0x5f,0x53,0x74
000028  6f705469          DCB      0x6f,0x70,0x54,0x69
00002c  6d657200          DCB      0x6d,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  s_ucTimeOutFlag
000000  00                DCB      0x00
                  s_count
000001  000000            DCB      0x00,0x00,0x00
                  s_uiDelayCount
                          DCD      0x00000000
                  g_iRunTime
                          DCD      0x00000000
                  s_TIM_CallBack1
                          DCD      0x00000000
                  s_TIM_CallBack2
                          DCD      0x00000000
                  s_TIM_CallBack3
                          DCD      0x00000000
                  s_TIM_CallBack4
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 128
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
