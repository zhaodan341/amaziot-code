; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_gprs.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_gprs.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_gprs.crf ..\..\User\bsp\src\bsp_GPRS.c]
                          THUMB

                          AREA ||i.AT_SendToCmdData||, CODE, READONLY, ALIGN=1

                  AT_SendToCmdData PROC
;;;313    */
;;;314    uint8_t AT_SendToCmdData(char *_pCMDstr,char *_pBACKstr,uint16_t _usTimeOut)
000000  b570              PUSH     {r4-r6,lr}
;;;315    {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
;;;316    	uint8_t ret;
;;;317    	uint8_t i;
;;;318    	GPRS_SendAT(_pCMDstr);
000006  f7fffffe          BL       GPRS_SendAT
;;;319    	for (i = 0; i < 5; i++)													//系统默认连续检测 5 次
00000a  2400              MOVS     r4,#0
                  |L1.12|
;;;320    	{
;;;321    		if (GPRS_WaitResponse(_pBACKstr, _usTimeOut))
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       GPRS_WaitResponse
000014  b108              CBZ      r0,|L1.26|
;;;322    				{
;;;323    					ret = 1;
000016  2001              MOVS     r0,#1
;;;324    					break;		
;;;325    				}else{
;;;326    					ret = 0;
;;;327    				}
;;;328    	}
;;;329    	return ret;
;;;330    }
000018  bd70              POP      {r4-r6,pc}
                  |L1.26|
00001a  1c64              ADDS     r4,r4,#1              ;326
00001c  2000              MOVS     r0,#0                 ;326
00001e  b2e4              UXTB     r4,r4                 ;319
000020  2c05              CMP      r4,#5                 ;319
000022  d3f3              BCC      |L1.12|
000024  bd70              POP      {r4-r6,pc}
;;;331    
                          ENDP


                          AREA ||i.GPRS_GetHardInfo||, CODE, READONLY, ALIGN=2

                  GPRS_GetHardInfo PROC
;;;339    */
;;;340    uint8_t GPRS_GetHardInfo(GPRS_INFO_T *_pInfo)
000000  b500              PUSH     {lr}
;;;341    {	
000002  b091              SUB      sp,sp,#0x44
;;;342    	char buf[64];
;;;343    	uint16_t len;
;;;344    	
;;;345    	GPRS_SendAT("ATI");		/* 发送 ATI 命令 */	
000004  a006              ADR      r0,|L2.32|
000006  f7fffffe          BL       GPRS_SendAT
;;;346    	len = GPRS_ReadResponse(buf, sizeof(buf), 300);	/* 超时 300ms */
00000a  f44f7296          MOV      r2,#0x12c
00000e  2140              MOVS     r1,#0x40
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       GPRS_ReadResponse
;;;347    	if (len == 0)
000016  2800              CMP      r0,#0
000018  d000              BEQ      |L2.28|
;;;348    	{
;;;349    		return 0;		
;;;350    	}
;;;351    	
;;;352    	return 1;
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;353    }
00001c  b011              ADD      sp,sp,#0x44
00001e  bd00              POP      {pc}
;;;354    
                          ENDP

                  |L2.32|
000020  41544900          DCB      "ATI",0

                          AREA ||i.GPRS_GetNetStatus||, CODE, READONLY, ALIGN=2

                  GPRS_GetNetStatus PROC
;;;362    */
;;;363    uint8_t GPRS_GetNetStatus(void)
000000  b510              PUSH     {r4,lr}
;;;364    {
000002  b0a0              SUB      sp,sp,#0x80
;;;365    	/*
;;;366    		AT+CREG?
;;;367    		+CREG: 0,1
;;;368    		
;;;369    		OK				
;;;370    	*/	
;;;371    	char buf[128];
;;;372    	uint16_t len, i;
;;;373    	uint8_t status = 0;
000004  2400              MOVS     r4,#0
;;;374    	
;;;375    	GPRS_SendAT("AT+CREG?");	/* 发送 AT 命令 */
000006  a00e              ADR      r0,|L3.64|
000008  f7fffffe          BL       GPRS_SendAT
;;;376    	
;;;377    	len = GPRS_ReadResponse(buf, sizeof(buf), 200);	/* 超时 200ms */
00000c  22c8              MOVS     r2,#0xc8
00000e  2180              MOVS     r1,#0x80
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       GPRS_ReadResponse
;;;378    	if (len == 0)
000016  2800              CMP      r0,#0
000018  d00b              BEQ      |L3.50|
;;;379    	{
;;;380    		return 0;		
;;;381    	}
;;;382    	
;;;383    	for (i = 2; i < len; i++)
00001a  2102              MOVS     r1,#2
00001c  466a              MOV      r2,sp                 ;371
00001e  e005              B        |L3.44|
                  |L3.32|
;;;384    	{
;;;385    		if (buf[i] == ',')
000020  5c53              LDRB     r3,[r2,r1]
000022  f1010101          ADD      r1,r1,#1
000026  2b2c              CMP      r3,#0x2c
000028  d005              BEQ      |L3.54|
00002a  b289              UXTH     r1,r1                 ;383
                  |L3.44|
00002c  4281              CMP      r1,r0                 ;383
00002e  d3f7              BCC      |L3.32|
                  |L3.48|
;;;386    		{
;;;387    			i++;
;;;388    			
;;;389    			status = buf[i] - '0';
;;;390    			break;
;;;391    		}
;;;392    	}
;;;393    	return status;
000030  4620              MOV      r0,r4
                  |L3.50|
;;;394    }
000032  b020              ADD      sp,sp,#0x80
000034  bd10              POP      {r4,pc}
                  |L3.54|
000036  b288              UXTH     r0,r1                 ;387
000038  5c10              LDRB     r0,[r2,r0]            ;389
00003a  3830              SUBS     r0,r0,#0x30           ;389
00003c  b2c4              UXTB     r4,r0                 ;389
00003e  e7f7              B        |L3.48|
                          ENDP

                  |L3.64|
000040  41542b43          DCB      "AT+CREG?",0
000044  5245473f
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.GPRS_PowerOff||, CODE, READONLY, ALIGN=1

                  GPRS_PowerOff PROC
;;;115    */
;;;116    void GPRS_PowerOff(void)
000000  4770              BX       lr
;;;117    {
;;;118    	/* 硬件关机 */
;;;119    
;;;120    }
;;;121    
                          ENDP


                          AREA ||i.GPRS_PowerOn||, CODE, READONLY, ALIGN=2

                  GPRS_PowerOn PROC
;;;45     */
;;;46     uint8_t GPRS_PowerOn(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;47     {
;;;48     	uint8_t ret_value = 0;
;;;49     	uint8_t i;
;;;50     	
;;;51     	/* 判断是否开机 */
;;;52     	
;;;53     	for (i = 0; i < 20; i++)								/* 开机等一会 */
000004  2400              MOVS     r4,#0
;;;54     	{
;;;55     		if (GPRS_WaitResponse("+CTZV:", 5000))
000006  f2413688          MOV      r6,#0x1388
                  |L5.10|
00000a  4631              MOV      r1,r6
00000c  a024              ADR      r0,|L5.160|
00000e  f7fffffe          BL       GPRS_WaitResponse
000012  b918              CBNZ     r0,|L5.28|
000014  1c64              ADDS     r4,r4,#1
000016  b2e4              UXTB     r4,r4                 ;53
000018  2c14              CMP      r4,#0x14              ;53
00001a  d3f6              BCC      |L5.10|
                  |L5.28|
;;;56     		{
;;;57     			ret_value = 1;
;;;58     			break;		
;;;59     		}
;;;60     	}
;;;61     	
;;;62     	for (i = 0; i < 5; i++)
00001c  2400              MOVS     r4,#0
;;;63     	{
;;;64     		GPRS_SendAT("AT");
;;;65     		if (GPRS_WaitResponse("OK", 1000))
00001e  f44f777a          MOV      r7,#0x3e8
                  |L5.34|
000022  a021              ADR      r0,|L5.168|
000024  f7fffffe          BL       GPRS_SendAT
000028  4639              MOV      r1,r7
00002a  a020              ADR      r0,|L5.172|
00002c  f7fffffe          BL       GPRS_WaitResponse
000030  b918              CBNZ     r0,|L5.58|
000032  1c64              ADDS     r4,r4,#1
000034  b2e4              UXTB     r4,r4                 ;62
000036  2c05              CMP      r4,#5                 ;62
000038  d3f3              BCC      |L5.34|
                  |L5.58|
;;;66     		{
;;;67     			ret_value = 1;
;;;68     			break;		
;;;69     		}
;;;70     	}
;;;71     	for (i = 0; i < 5; i++)
00003a  2500              MOVS     r5,#0
00003c  463c              MOV      r4,r7                 ;65
                  |L5.62|
;;;72     	{
;;;73     		GPRS_SendAT("AT+CSQ");
00003e  a01c              ADR      r0,|L5.176|
000040  f7fffffe          BL       GPRS_SendAT
;;;74     		if (GPRS_WaitResponse(_rATCMDCSQ, 1000))
000044  4621              MOV      r1,r4
000046  a01c              ADR      r0,|L5.184|
000048  f7fffffe          BL       GPRS_WaitResponse
00004c  b918              CBNZ     r0,|L5.86|
00004e  1c6d              ADDS     r5,r5,#1
000050  b2ed              UXTB     r5,r5                 ;71
000052  2d05              CMP      r5,#5                 ;71
000054  d3f3              BCC      |L5.62|
                  |L5.86|
;;;75     			{
;;;76     				ret_value = 1;
;;;77     				break;		
;;;78     			}
;;;79     	}
;;;80     	
;;;81     	for (i = 0; i < 10; i++)
000056  2500              MOVS     r5,#0
                  |L5.88|
;;;82     	{
;;;83     		GPRS_SendAT("AT+CEREG?");
000058  a019              ADR      r0,|L5.192|
00005a  f7fffffe          BL       GPRS_SendAT
;;;84     		if (GPRS_WaitResponse(_rATCMDCEREG, 5000))
00005e  4631              MOV      r1,r6
000060  a01a              ADR      r0,|L5.204|
000062  f7fffffe          BL       GPRS_WaitResponse
000066  b918              CBNZ     r0,|L5.112|
000068  1c6d              ADDS     r5,r5,#1
00006a  b2ed              UXTB     r5,r5                 ;81
00006c  2d0a              CMP      r5,#0xa               ;81
;;;85     				{
;;;86     					ret_value = 1;
;;;87     					break;		
;;;88     				}else{
;;;89     					ret_value = 0;
00006e  d3f3              BCC      |L5.88|
                  |L5.112|
;;;90     				}
;;;91     	}
;;;92     	for (i = 0; i < 5; i++)
000070  2500              MOVS     r5,#0
000072  4626              MOV      r6,r4                 ;65
                  |L5.116|
;;;93     	{
;;;94     		GPRS_SendAT("AT+CGACT=1,1");
000074  a019              ADR      r0,|L5.220|
000076  f7fffffe          BL       GPRS_SendAT
;;;95     		if (GPRS_WaitResponse("OK", 1000))
00007a  4631              MOV      r1,r6
00007c  a00b              ADR      r0,|L5.172|
00007e  f7fffffe          BL       GPRS_WaitResponse
000082  b108              CBZ      r0,|L5.136|
;;;96     				{
;;;97     					ret_value = 1;
000084  2401              MOVS     r4,#1
;;;98     					break;		
000086  e004              B        |L5.146|
                  |L5.136|
;;;99     				}else{
;;;100    					ret_value = 0;
000088  1c6d              ADDS     r5,r5,#1
00008a  2400              MOVS     r4,#0
00008c  b2ed              UXTB     r5,r5                 ;92
00008e  2d05              CMP      r5,#5                 ;92
000090  d3f0              BCC      |L5.116|
                  |L5.146|
;;;101    				}
;;;102    	}
;;;103    	comClearRxFifo(COM_GPRS);	/* 清零串口接收缓冲区 */
000092  2001              MOVS     r0,#1
000094  f7fffffe          BL       comClearRxFifo
;;;104    	return ret_value;
000098  4620              MOV      r0,r4
;;;105    }
00009a  e8bd81f0          POP      {r4-r8,pc}
;;;106    
                          ENDP

00009e  0000              DCW      0x0000
                  |L5.160|
0000a0  2b43545a          DCB      "+CTZV:",0
0000a4  563a00  
0000a7  00                DCB      0
                  |L5.168|
0000a8  415400            DCB      "AT",0
0000ab  00                DCB      0
                  |L5.172|
0000ac  4f4b00            DCB      "OK",0
0000af  00                DCB      0
                  |L5.176|
0000b0  41542b43          DCB      "AT+CSQ",0
0000b4  535100  
0000b7  00                DCB      0
                  |L5.184|
0000b8  2b435351          DCB      "+CSQ: ",0
0000bc  3a2000  
0000bf  00                DCB      0
                  |L5.192|
0000c0  41542b43          DCB      "AT+CEREG?",0
0000c4  45524547
0000c8  3f00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L5.204|
0000cc  2b434552          DCB      "+CEREG: 1, 1",0
0000d0  45473a20
0000d4  312c2031
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L5.220|
0000dc  41542b43          DCB      "AT+CGACT=1,1",0
0000e0  47414354
0000e4  3d312c31
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0

                          AREA ||i.GPRS_PrintRxData||, CODE, READONLY, ALIGN=1

                  GPRS_PrintRxData PROC
;;;30     */
;;;31     void GPRS_PrintRxData(uint8_t _ch)
000000  4601              MOV      r1,r0
;;;32     {
;;;33     	#ifdef GPRS_TO_COM1_EN
;;;34     		comSendChar(COM1, _ch);		/* 将接收到数据打印到调试串口1 */
000002  2000              MOVS     r0,#0
000004  f7ffbffe          B.W      comSendChar
;;;35     	#endif
;;;36     }
;;;37     
                          ENDP


                          AREA ||i.GPRS_ReadResponse||, CODE, READONLY, ALIGN=1

                  GPRS_ReadResponse PROC
;;;211    */
;;;212    uint16_t GPRS_ReadResponse(char *_pBuf, uint16_t _usBufSize, uint16_t _usTimeOut)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;213    {
;;;214    	uint8_t ucData;
;;;215    	uint16_t pos = 0;
000004  f04f0400          MOV      r4,#0
000008  4688              MOV      r8,r1                 ;213
00000a  4607              MOV      r7,r0                 ;213
00000c  0016              MOVS     r6,r2                 ;213
;;;216    	uint8_t ret;
;;;217    	uint8_t status = 0;		/* 接收状态 */
00000e  4625              MOV      r5,r4
000010  d00b              BEQ      |L7.42|
;;;218    
;;;219    	/* _usTimeOut == 0 表示无限等待 */
;;;220    	if (_usTimeOut > 0)
;;;221    	{
;;;222    		bsp_StartTimer(GPRS_TMR_ID, _usTimeOut);		/* 使用软件定时器作为超时控制 */
000012  4611              MOV      r1,r2
000014  2003              MOVS     r0,#3
000016  f7fffffe          BL       bsp_StartTimer
;;;223    	}
;;;224    	while (1)
;;;225    	{
;;;226    		bsp_Idle();					/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
00001a  f7fffffe          BL       bsp_Idle
00001e  e011              B        |L7.68|
                  |L7.32|
000020  f7fffffe          BL       bsp_Idle
;;;227    
;;;228    		if (status == 2)		/* 正在接收有效应答阶段，通过字符间超时判断数据接收完毕 */
000024  2d02              CMP      r5,#2
000026  d003              BEQ      |L7.48|
000028  e00b              B        |L7.66|
                  |L7.42|
00002a  f7fffffe          BL       bsp_Idle
00002e  e00f              B        |L7.80|
                  |L7.48|
;;;229    		{
;;;230    			if (bsp_CheckTimer(GPRS_TMR_ID))
000030  2003              MOVS     r0,#3
000032  f7fffffe          BL       bsp_CheckTimer
000036  b158              CBZ      r0,|L7.80|
;;;231    			{
;;;232    				_pBuf[pos]	 = 0;	/* 结尾加0， 便于函数调用者识别字符串结束 */
000038  2000              MOVS     r0,#0
00003a  5538              STRB     r0,[r7,r4]
;;;233    				ret = pos;				/* 成功。 返回数据长度 */
00003c  b2e0              UXTB     r0,r4
                  |L7.62|
;;;234    				break;
;;;235    			}
;;;236    		}
;;;237    		else
;;;238    		{
;;;239    			if (_usTimeOut > 0)
;;;240    			{
;;;241    				if (bsp_CheckTimer(GPRS_TMR_ID))
;;;242    				{
;;;243    					ret = 0;	/* 超时 */
;;;244    					break;
;;;245    				}
;;;246    			}
;;;247    		}
;;;248    		
;;;249    		if (comGetChar(COM_GPRS, &ucData))
;;;250    		{			
;;;251    			GPRS_PrintRxData(ucData);		/* 将接收到数据打印到调试串口1 */
;;;252    
;;;253    			switch (status)
;;;254    			{
;;;255    				case 0:									  /* 首字符 */
;;;256    					if (ucData == AT_CR)		/* 如果首字符是回车，表示 AT命令不会显 */
;;;257    					{
;;;258    						_pBuf[pos++] = ucData;		/* 保存接收到的数据 */
;;;259    						status = 2;	 /* 认为收到模块应答结果 */
;;;260    					}
;;;261    					else					 /* 首字符是 A 表示 AT命令回显 */
;;;262    					{
;;;263    						status = 1;	 /* 这是主机发送的AT命令字符串，不保存应答数据，直到遇到 CR字符 */
;;;264    					}
;;;265    					break;
;;;266    					
;;;267    				case 1:			/* AT命令回显阶段, 不保存数据. 继续等待 */
;;;268    					if (ucData == AT_CR)
;;;269    					{
;;;270    						status = 2;
;;;271    					}
;;;272    					break;
;;;273    					
;;;274    				case 2:			/* 开始接收模块应答结果 */
;;;275    										/* 只要收到模块的应答字符，则采用字符间超时判断结束，此时命令总超时不起作用 */
;;;276    					bsp_StartTimer(GPRS_TMR_ID, 500);
;;;277    					if (pos < _usBufSize - 1)
;;;278    					{
;;;279    						_pBuf[pos++] = ucData;		/* 保存接收到的数据 */
;;;280    					}
;;;281    					break;
;;;282    			}
;;;283    		}
;;;284    	}
;;;285    	return ret;
;;;286    }
00003e  e8bd83f8          POP      {r3-r9,pc}
                  |L7.66|
000042  b12e              CBZ      r6,|L7.80|
                  |L7.68|
000044  2003              MOVS     r0,#3                 ;241
000046  f7fffffe          BL       bsp_CheckTimer
00004a  b108              CBZ      r0,|L7.80|
00004c  2000              MOVS     r0,#0                 ;243
00004e  e7f6              B        |L7.62|
                  |L7.80|
000050  4669              MOV      r1,sp                 ;249
000052  2001              MOVS     r0,#1                 ;249
000054  f7fffffe          BL       comGetChar
000058  2800              CMP      r0,#0                 ;249
00005a  d0e1              BEQ      |L7.32|
00005c  f89d0000          LDRB     r0,[sp,#0]            ;251
000060  f7fffffe          BL       GPRS_PrintRxData
000064  b195              CBZ      r5,|L7.140|
000066  2d01              CMP      r5,#1                 ;253
000068  d01c              BEQ      |L7.164|
00006a  2d02              CMP      r5,#2                 ;253
00006c  d1d8              BNE      |L7.32|
00006e  f44f71fa          MOV      r1,#0x1f4             ;276
000072  2003              MOVS     r0,#3                 ;276
000074  f7fffffe          BL       bsp_StartTimer
000078  f1a80001          SUB      r0,r8,#1              ;277
00007c  4284              CMP      r4,r0                 ;277
00007e  dacf              BGE      |L7.32|
000080  f89d0000          LDRB     r0,[sp,#0]            ;279
000084  5538              STRB     r0,[r7,r4]            ;279
000086  1c64              ADDS     r4,r4,#1              ;279
000088  b2a4              UXTH     r4,r4                 ;279
00008a  e7c9              B        |L7.32|
                  |L7.140|
00008c  f89d0000          LDRB     r0,[sp,#0]            ;256
000090  280d              CMP      r0,#0xd               ;256
000092  d003              BEQ      |L7.156|
000094  2501              MOVS     r5,#1                 ;263
000096  f7fffffe          BL       bsp_Idle
00009a  e7d2              B        |L7.66|
                  |L7.156|
00009c  5538              STRB     r0,[r7,r4]            ;258
00009e  1c64              ADDS     r4,r4,#1              ;258
0000a0  b2a4              UXTH     r4,r4                 ;258
0000a2  e003              B        |L7.172|
                  |L7.164|
0000a4  f89d0000          LDRB     r0,[sp,#0]            ;268
0000a8  280d              CMP      r0,#0xd               ;268
0000aa  d1b9              BNE      |L7.32|
                  |L7.172|
0000ac  2502              MOVS     r5,#2                 ;270
0000ae  f7fffffe          BL       bsp_Idle
0000b2  e7bd              B        |L7.48|
;;;287    
                          ENDP


                          AREA ||i.GPRS_SendAT||, CODE, READONLY, ALIGN=2

                  GPRS_SendAT PROC
;;;295    */
;;;296    void GPRS_SendAT(char *_Cmd)
000000  b510              PUSH     {r4,lr}
;;;297    {
000002  4604              MOV      r4,r0
;;;298    	comClearRxFifo(COM_GPRS);	/* 清零串口接收缓冲区 */	
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       comClearRxFifo
;;;299    	
;;;300    	comSendBuf(COM_GPRS, (uint8_t *)_Cmd, strlen(_Cmd));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       strlen
000010  b282              UXTH     r2,r0
000012  4621              MOV      r1,r4
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       comSendBuf
;;;301    	comSendBuf(COM_GPRS, "\r", 1);
00001a  2201              MOVS     r2,#1
00001c  e8bd4010          POP      {r4,lr}
000020  a101              ADR      r1,|L8.40|
000022  4610              MOV      r0,r2
000024  f7ffbffe          B.W      comSendBuf
;;;302    }
;;;303    
                          ENDP

                  |L8.40|
000028  0d00              DCB      "\r",0
00002a  00                DCB      0
00002b  00                DCB      0

                          AREA ||i.GPRS_WaitResponse||, CODE, READONLY, ALIGN=2

                  GPRS_WaitResponse PROC
;;;130    */
;;;131    uint8_t GPRS_WaitResponse(char *_pAckStr, uint16_t _usTimeOut)
000000  b5f0              PUSH     {r4-r7,lr}
;;;132    {
000002  b0c1              SUB      sp,sp,#0x104
000004  460e              MOV      r6,r1
000006  4607              MOV      r7,r0
;;;133    	uint8_t ucData;
;;;134    	uint8_t ucRxBuf[256];
;;;135    	uint16_t pos = 0;
000008  2400              MOVS     r4,#0
;;;136    	uint32_t len;
;;;137    	uint8_t ret;
;;;138    
;;;139    	len = strlen(_pAckStr);
00000a  f7fffffe          BL       strlen
00000e  4605              MOV      r5,r0
;;;140    	if (len > 255)
000010  28ff              CMP      r0,#0xff
000012  d80c              BHI      |L9.46|
;;;141    	{
;;;142    		return 0;
;;;143    	}
;;;144    
;;;145    	/* _usTimeOut == 0 表示无限等待 */
;;;146    	if (_usTimeOut > 0)
000014  b176              CBZ      r6,|L9.52|
;;;147    	{
;;;148    		bsp_StartTimer(GPRS_TMR_ID, _usTimeOut);		/* 使用软件定时器3，作为超时控制 */
000016  4631              MOV      r1,r6
000018  2003              MOVS     r0,#3
00001a  f7fffffe          BL       bsp_StartTimer
;;;149    	}
;;;150    	while (1)
;;;151    	{
;;;152    		bsp_Idle();				/* CPU空闲执行的操作， 见 bsp.c 和 bsp.h 文件 */
00001e  bf00              NOP      
                  |L9.32|
000020  f7fffffe          BL       bsp_Idle
;;;153    
;;;154    		if (_usTimeOut > 0)
000024  b146              CBZ      r6,|L9.56|
;;;155    		{
;;;156    			if (bsp_CheckTimer(GPRS_TMR_ID))
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       bsp_CheckTimer
00002c  b120              CBZ      r0,|L9.56|
                  |L9.46|
;;;157    			{
;;;158    				ret = 0;	/* 超时 */
00002e  2000              MOVS     r0,#0
                  |L9.48|
;;;159    				break;
;;;160    			}
;;;161    		}
;;;162    
;;;163    		if (comGetChar(COM_GPRS, &ucData))
;;;164    		{
;;;165    			GPRS_PrintRxData(ucData);		/* 将接收到数据打印到调试串口1 */
;;;166    
;;;167    			if (ucData == '\n')
;;;168    			{
;;;169    				if (pos > 0)	/* 第2次收到回车换行 */
;;;170    				{
;;;171    					if (memcmp(ucRxBuf, _pAckStr,  len) == 0)
;;;172    					{
;;;173    						ret = 1;	/* 收到指定的应答数据，返回成功 */
;;;174    						break;
;;;175    					}
;;;176    					else
;;;177    					{
;;;178    						pos = 0;
;;;179    					}
;;;180    				}
;;;181    				else
;;;182    				{
;;;183    					pos = 0;
;;;184    				}
;;;185    			}
;;;186    			else
;;;187    			{
;;;188    				if (pos < sizeof(ucRxBuf))
;;;189    				{
;;;190    					/* 只保存可见字符 */
;;;191    					if (ucData >= ' ')
;;;192    					{
;;;193    						ucRxBuf[pos++] = ucData;
;;;194    					}
;;;195    				}
;;;196    			}
;;;197    		}
;;;198    	}
;;;199    	return ret;
;;;200    }
000030  b041              ADD      sp,sp,#0x104
000032  bdf0              POP      {r4-r7,pc}
                  |L9.52|
000034  f7fffffe          BL       bsp_Idle
                  |L9.56|
000038  a940              ADD      r1,sp,#0x100          ;163
00003a  2001              MOVS     r0,#1                 ;163
00003c  f7fffffe          BL       comGetChar
000040  2800              CMP      r0,#0                 ;163
000042  d0ed              BEQ      |L9.32|
000044  f89d0100          LDRB     r0,[sp,#0x100]        ;165
000048  f7fffffe          BL       GPRS_PrintRxData
00004c  f89d0100          LDRB     r0,[sp,#0x100]        ;167
000050  280a              CMP      r0,#0xa               ;167
000052  d008              BEQ      |L9.102|
000054  2cff              CMP      r4,#0xff              ;188
000056  d8e3              BHI      |L9.32|
000058  2820              CMP      r0,#0x20              ;191
00005a  d3e1              BCC      |L9.32|
00005c  f80d0004          STRB     r0,[sp,r4]            ;193
000060  1c64              ADDS     r4,r4,#1              ;193
000062  b2a4              UXTH     r4,r4                 ;193
000064  e7dc              B        |L9.32|
                  |L9.102|
000066  2c00              CMP      r4,#0                 ;169
000068  d0da              BEQ      |L9.32|
00006a  462a              MOV      r2,r5                 ;171
00006c  4639              MOV      r1,r7                 ;171
00006e  4668              MOV      r0,sp                 ;171
000070  f7fffffe          BL       memcmp
000074  b108              CBZ      r0,|L9.122|
000076  2400              MOVS     r4,#0                 ;178
000078  e7d2              B        |L9.32|
                  |L9.122|
00007a  2001              MOVS     r0,#1                 ;173
00007c  e7d8              B        |L9.48|
;;;201    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_GPRS.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_bsp_GPRS_c_8e8a4866____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_bsp_GPRS_c_8e8a4866____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_bsp_GPRS_c_8e8a4866____REVSH|
#line 128
|__asm___10_bsp_GPRS_c_8e8a4866____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
