; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\flash\obj\bsp_key.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_key.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=526 -D_RTE_ -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\flash\obj\bsp_key.crf ..\..\User\bsp\src\bsp_key.c]
                          THUMB

                          AREA ||i.IsKeyDown1||, CODE, READONLY, ALIGN=2

                  IsKeyDown1 PROC
;;;91     #if 1	/* 为了区分3个事件:　K1单独按下, K2单独按下， K1和K2同时按下 */
;;;92     static uint8_t IsKeyDown1(void)
000000  4807              LDR      r0,|L1.32|
;;;93     {
;;;94     	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0
000002  6880              LDR      r0,[r0,#8]
000004  0480              LSLS     r0,r0,#18
000006  d409              BMI      |L1.28|
000008  4806              LDR      r0,|L1.36|
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  d105              BNE      |L1.28|
;;;95     		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
000010  4805              LDR      r0,|L1.40|
000012  6880              LDR      r0,[r0,#8]
000014  05c0              LSLS     r0,r0,#23
000016  d501              BPL      |L1.28|
;;;96     		return 1;
000018  2001              MOVS     r0,#1
;;;97     	else 
;;;98     		return 0;
;;;99     }
00001a  4770              BX       lr
                  |L1.28|
00001c  2000              MOVS     r0,#0                 ;98
00001e  4770              BX       lr
;;;100    static uint8_t IsKeyDown2(void)
                          ENDP

                  |L1.32|
                          DCD      0x40011000
                  |L1.36|
                          DCD      0x40010808
                  |L1.40|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown10||, CODE, READONLY, ALIGN=2

                  IsKeyDown10 PROC
;;;123    }
;;;124    static uint8_t IsKeyDown10(void)	/* K2 K3组合键 */
000000  4807              LDR      r0,|L2.32|
;;;125    {
;;;126    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
000002  6880              LDR      r0,[r0,#8]
000004  0480              LSLS     r0,r0,#18
000006  d509              BPL      |L2.28|
000008  4806              LDR      r0,|L2.36|
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  d005              BEQ      |L2.28|
;;;127    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0)
000010  4805              LDR      r0,|L2.40|
000012  6880              LDR      r0,[r0,#8]
000014  05c0              LSLS     r0,r0,#23
000016  d401              BMI      |L2.28|
;;;128    		return 1;
000018  2001              MOVS     r0,#1
;;;129    	else 
;;;130    		return 0;
;;;131    }
00001a  4770              BX       lr
                  |L2.28|
00001c  2000              MOVS     r0,#0                 ;130
00001e  4770              BX       lr
;;;132    #else	
                          ENDP

                  |L2.32|
                          DCD      0x40011000
                  |L2.36|
                          DCD      0x40010808
                  |L2.40|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown2||, CODE, READONLY, ALIGN=2

                  IsKeyDown2 PROC
;;;99     }
;;;100    static uint8_t IsKeyDown2(void)
000000  4807              LDR      r0,|L3.32|
;;;101    {
;;;102    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
000002  6880              LDR      r0,[r0,#8]
000004  0480              LSLS     r0,r0,#18
000006  d509              BPL      |L3.28|
000008  4806              LDR      r0,|L3.36|
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  d005              BEQ      |L3.28|
;;;103    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
000010  4805              LDR      r0,|L3.40|
000012  6880              LDR      r0,[r0,#8]
000014  05c0              LSLS     r0,r0,#23
000016  d501              BPL      |L3.28|
;;;104    		return 1;
000018  2001              MOVS     r0,#1
;;;105    	else 
;;;106    		return 0;
;;;107    }
00001a  4770              BX       lr
                  |L3.28|
00001c  2000              MOVS     r0,#0                 ;106
00001e  4770              BX       lr
;;;108    static uint8_t IsKeyDown3(void)
                          ENDP

                  |L3.32|
                          DCD      0x40011000
                  |L3.36|
                          DCD      0x40010808
                  |L3.40|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown3||, CODE, READONLY, ALIGN=2

                  IsKeyDown3 PROC
;;;107    }
;;;108    static uint8_t IsKeyDown3(void)
000000  4807              LDR      r0,|L4.32|
;;;109    {
;;;110    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) != 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) == 0
000002  6880              LDR      r0,[r0,#8]
000004  0480              LSLS     r0,r0,#18
000006  d509              BPL      |L4.28|
000008  4806              LDR      r0,|L4.36|
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  d105              BNE      |L4.28|
;;;111    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) == 0)
000010  4805              LDR      r0,|L4.40|
000012  6880              LDR      r0,[r0,#8]
000014  05c0              LSLS     r0,r0,#23
000016  d401              BMI      |L4.28|
;;;112    		return 1;
000018  2001              MOVS     r0,#1
;;;113    	else 
;;;114    		return 0;
;;;115    }
00001a  4770              BX       lr
                  |L4.28|
00001c  2000              MOVS     r0,#0                 ;114
00001e  4770              BX       lr
;;;116    static uint8_t IsKeyDown9(void)	/* K1 K2组合键 */
                          ENDP

                  |L4.32|
                          DCD      0x40011000
                  |L4.36|
                          DCD      0x40010808
                  |L4.40|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown4||, CODE, READONLY, ALIGN=2

                  IsKeyDown4 PROC
;;;141    /* 5方向摇杆 */
;;;142    static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
000000  4803              LDR      r0,|L5.16|
000002  6880              LDR      r0,[r0,#8]
000004  0400              LSLS     r0,r0,#16
000006  d401              BMI      |L5.12|
000008  2001              MOVS     r0,#1
00000a  4770              BX       lr
                  |L5.12|
00000c  2000              MOVS     r0,#0
00000e  4770              BX       lr
;;;143    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
                          ENDP

                  |L5.16|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown5||, CODE, READONLY, ALIGN=2

                  IsKeyDown5 PROC
;;;142    static uint8_t IsKeyDown4(void) {if ((GPIO_PORT_K4->IDR & GPIO_PIN_K4) == 0) return 1;else return 0;}
;;;143    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
000000  4803              LDR      r0,|L6.16|
000002  6800              LDR      r0,[r0,#0]
000004  0700              LSLS     r0,r0,#28
000006  d401              BMI      |L6.12|
000008  2001              MOVS     r0,#1
00000a  4770              BX       lr
                  |L6.12|
00000c  2000              MOVS     r0,#0
00000e  4770              BX       lr
;;;144    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
                          ENDP

                  |L6.16|
                          DCD      0x40011408

                          AREA ||i.IsKeyDown6||, CODE, READONLY, ALIGN=2

                  IsKeyDown6 PROC
;;;143    static uint8_t IsKeyDown5(void) {if ((GPIO_PORT_K5->IDR & GPIO_PIN_K5) == 0) return 1;else return 0;}
;;;144    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
000000  4803              LDR      r0,|L7.16|
000002  6880              LDR      r0,[r0,#8]
000004  0440              LSLS     r0,r0,#17
000006  d401              BMI      |L7.12|
000008  2001              MOVS     r0,#1
00000a  4770              BX       lr
                  |L7.12|
00000c  2000              MOVS     r0,#0
00000e  4770              BX       lr
;;;145    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
                          ENDP

                  |L7.16|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown7||, CODE, READONLY, ALIGN=2

                  IsKeyDown7 PROC
;;;144    static uint8_t IsKeyDown6(void) {if ((GPIO_PORT_K6->IDR & GPIO_PIN_K6) == 0) return 1;else return 0;}
;;;145    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
000000  4803              LDR      r0,|L8.16|
000002  6880              LDR      r0,[r0,#8]
000004  0480              LSLS     r0,r0,#18
000006  d401              BMI      |L8.12|
000008  2001              MOVS     r0,#1
00000a  4770              BX       lr
                  |L8.12|
00000c  2000              MOVS     r0,#0
00000e  4770              BX       lr
;;;146    static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
                          ENDP

                  |L8.16|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown8||, CODE, READONLY, ALIGN=2

                  IsKeyDown8 PROC
;;;145    static uint8_t IsKeyDown7(void) {if ((GPIO_PORT_K7->IDR & GPIO_PIN_K7) == 0) return 1;else return 0;}
;;;146    static uint8_t IsKeyDown8(void) {if ((GPIO_PORT_K8->IDR & GPIO_PIN_K8) == 0) return 1;else return 0;}
000000  4803              LDR      r0,|L9.16|
000002  6880              LDR      r0,[r0,#8]
000004  0600              LSLS     r0,r0,#24
000006  d401              BMI      |L9.12|
000008  2001              MOVS     r0,#1
00000a  4770              BX       lr
                  |L9.12|
00000c  2000              MOVS     r0,#0
00000e  4770              BX       lr
;;;147    
                          ENDP

                  |L9.16|
                          DCD      0x40012000

                          AREA ||i.IsKeyDown9||, CODE, READONLY, ALIGN=2

                  IsKeyDown9 PROC
;;;115    }
;;;116    static uint8_t IsKeyDown9(void)	/* K1 K2组合键 */
000000  4807              LDR      r0,|L10.32|
;;;117    {
;;;118    	if ((GPIO_PORT_K1->IDR & GPIO_PIN_K1) == 0 && (GPIO_PORT_K2->IDR & GPIO_PIN_K2) != 0
000002  6880              LDR      r0,[r0,#8]
000004  0480              LSLS     r0,r0,#18
000006  d409              BMI      |L10.28|
000008  4806              LDR      r0,|L10.36|
00000a  6800              LDR      r0,[r0,#0]
00000c  07c0              LSLS     r0,r0,#31
00000e  d005              BEQ      |L10.28|
;;;119    		&& (GPIO_PORT_K3->IDR & GPIO_PIN_K3) != 0)
000010  4805              LDR      r0,|L10.40|
000012  6880              LDR      r0,[r0,#8]
000014  05c0              LSLS     r0,r0,#23
000016  d501              BPL      |L10.28|
;;;120    		return 1;
000018  2001              MOVS     r0,#1
;;;121    	else 
;;;122    		return 0;
;;;123    }
00001a  4770              BX       lr
                  |L10.28|
00001c  2000              MOVS     r0,#0                 ;122
00001e  4770              BX       lr
;;;124    static uint8_t IsKeyDown10(void)	/* K2 K3组合键 */
                          ENDP

                  |L10.32|
                          DCD      0x40011000
                  |L10.36|
                          DCD      0x40010808
                  |L10.40|
                          DCD      0x40012000

                          AREA ||i.bsp_ClearKey||, CODE, READONLY, ALIGN=2

                  bsp_ClearKey PROC
;;;277    */
;;;278    void bsp_ClearKey(void)
000000  4801              LDR      r0,|L11.8|
;;;279    {
;;;280    	s_tKey.Read = s_tKey.Write;
000002  7ac1              LDRB     r1,[r0,#0xb]  ; s_tKey
000004  7281              STRB     r1,[r0,#0xa]
;;;281    }
000006  4770              BX       lr
;;;282    
                          ENDP

                  |L11.8|
                          DCD      ||.bss||+0xa0

                          AREA ||i.bsp_DetectKey||, CODE, READONLY, ALIGN=2

                  bsp_DetectKey PROC
;;;393    */
;;;394    static void bsp_DetectKey(uint8_t i)
000000  b570              PUSH     {r4-r6,lr}
;;;395    {
000002  4606              MOV      r6,r0
;;;396    	KEY_T *pBtn;
;;;397    
;;;398    	/*
;;;399    		如果没有初始化按键函数，则报错
;;;400    		if (s_tBtn[i].IsKeyDownFunc == 0)
;;;401    		{
;;;402    			printf("Fault : DetectButton(), s_tBtn[i].IsKeyDownFunc undefine");
;;;403    		}
;;;404    	*/
;;;405    
;;;406    	pBtn = &s_tBtn[i];
000004  4828              LDR      r0,|L12.168|
000006  eb001406          ADD      r4,r0,r6,LSL #4
;;;407    	if (pBtn->IsKeyDownFunc())
00000a  6820              LDR      r0,[r4,#0]
00000c  4780              BLX      r0
;;;408    	{
;;;409    		if (pBtn->Count < KEY_FILTER_TIME)
;;;410    		{
;;;411    			pBtn->Count = KEY_FILTER_TIME;
00000e  2105              MOVS     r1,#5
;;;412    		}
;;;413    		else if(pBtn->Count < 2 * KEY_FILTER_TIME)
;;;414    		{
;;;415    			pBtn->Count++;
;;;416    		}
;;;417    		else
;;;418    		{
;;;419    			if (pBtn->State == 0)
;;;420    			{
;;;421    				pBtn->State = 1;
;;;422    
;;;423    				/* 发送按钮按下的消息 */
;;;424    				bsp_PutKey((uint8_t)(3 * i + 1));
000010  2500              MOVS     r5,#0
000012  2800              CMP      r0,#0                 ;407
;;;425    			}
;;;426    
;;;427    			if (pBtn->LongTime > 0)
;;;428    			{
;;;429    				if (pBtn->LongCount < pBtn->LongTime)
;;;430    				{
;;;431    					/* 发送按钮持续按下的消息 */
;;;432    					if (++pBtn->LongCount == pBtn->LongTime)
;;;433    					{
;;;434    						/* 键值放入按键FIFO */
;;;435    						bsp_PutKey((uint8_t)(3 * i + 3));
;;;436    					}
;;;437    				}
;;;438    				else
;;;439    				{
;;;440    					if (pBtn->RepeatSpeed > 0)
;;;441    					{
;;;442    						if (++pBtn->RepeatCount >= pBtn->RepeatSpeed)
;;;443    						{
;;;444    							pBtn->RepeatCount = 0;
;;;445    							/* 常按键后，每隔10ms发送1个按键 */
;;;446    							bsp_PutKey((uint8_t)(3 * i + 1));
;;;447    						}
;;;448    					}
;;;449    				}
;;;450    			}
;;;451    		}
;;;452    	}
;;;453    	else
;;;454    	{
;;;455    		if(pBtn->Count > KEY_FILTER_TIME)
000014  7920              LDRB     r0,[r4,#4]
000016  eb060346          ADD      r3,r6,r6,LSL #1       ;424
00001a  d031              BEQ      |L12.128|
00001c  2805              CMP      r0,#5                 ;409
00001e  d201              BCS      |L12.36|
000020  7121              STRB     r1,[r4,#4]            ;411
;;;456    		{
;;;457    			pBtn->Count = KEY_FILTER_TIME;
;;;458    		}
;;;459    		else if(pBtn->Count != 0)
;;;460    		{
;;;461    			pBtn->Count--;
;;;462    		}
;;;463    		else
;;;464    		{
;;;465    			if (pBtn->State == 1)
;;;466    			{
;;;467    				pBtn->State = 0;
;;;468    
;;;469    				/* 发送按钮弹起的消息 */
;;;470    				bsp_PutKey((uint8_t)(3 * i + 2));
;;;471    			}
;;;472    		}
;;;473    
;;;474    		pBtn->LongCount = 0;
;;;475    		pBtn->RepeatCount = 0;
;;;476    	}
;;;477    }
000022  bd70              POP      {r4-r6,pc}
                  |L12.36|
000024  280a              CMP      r0,#0xa               ;413
000026  d202              BCS      |L12.46|
000028  1c40              ADDS     r0,r0,#1              ;413
00002a  7120              STRB     r0,[r4,#4]            ;415
                  |L12.44|
00002c  bd70              POP      {r4-r6,pc}
                  |L12.46|
00002e  7aa0              LDRB     r0,[r4,#0xa]          ;419
000030  eb060646          ADD      r6,r6,r6,LSL #1       ;424
000034  1c76              ADDS     r6,r6,#1              ;424
000036  b920              CBNZ     r0,|L12.66|
000038  2001              MOVS     r0,#1                 ;421
00003a  72a0              STRB     r0,[r4,#0xa]          ;421
00003c  b2f0              UXTB     r0,r6                 ;424
00003e  f7fffffe          BL       bsp_PutKey
                  |L12.66|
000042  8921              LDRH     r1,[r4,#8]            ;427
000044  2900              CMP      r1,#0                 ;427
000046  d0f1              BEQ      |L12.44|
000048  88e0              LDRH     r0,[r4,#6]            ;429
00004a  4288              CMP      r0,r1                 ;429
00004c  d208              BCS      |L12.96|
00004e  1c40              ADDS     r0,r0,#1              ;429
000050  b280              UXTH     r0,r0                 ;432
000052  80e0              STRH     r0,[r4,#6]            ;432
000054  8921              LDRH     r1,[r4,#8]            ;432
000056  4288              CMP      r0,r1                 ;432
000058  d1e8              BNE      |L12.44|
00005a  1cdb              ADDS     r3,r3,#3              ;432
00005c  b2d8              UXTB     r0,r3                 ;435
00005e  e00b              B        |L12.120|
                  |L12.96|
000060  7ae0              LDRB     r0,[r4,#0xb]          ;440
000062  2800              CMP      r0,#0                 ;440
000064  d0e2              BEQ      |L12.44|
000066  7b20              LDRB     r0,[r4,#0xc]          ;442
000068  1c40              ADDS     r0,r0,#1              ;442
00006a  b2c0              UXTB     r0,r0                 ;442
00006c  7320              STRB     r0,[r4,#0xc]          ;442
00006e  7ae1              LDRB     r1,[r4,#0xb]          ;442
000070  4288              CMP      r0,r1                 ;442
000072  d3db              BCC      |L12.44|
000074  7325              STRB     r5,[r4,#0xc]          ;444
000076  b2f0              UXTB     r0,r6                 ;446
                  |L12.120|
000078  e8bd4070          POP      {r4-r6,lr}            ;446
00007c  f7ffbffe          B.W      bsp_PutKey
                  |L12.128|
000080  2805              CMP      r0,#5                 ;455
000082  d901              BLS      |L12.136|
000084  7121              STRB     r1,[r4,#4]            ;457
000086  e00b              B        |L12.160|
                  |L12.136|
000088  b110              CBZ      r0,|L12.144|
00008a  1e40              SUBS     r0,r0,#1              ;459
00008c  7120              STRB     r0,[r4,#4]            ;461
00008e  e007              B        |L12.160|
                  |L12.144|
000090  7aa0              LDRB     r0,[r4,#0xa]          ;465
000092  2801              CMP      r0,#1                 ;465
000094  d104              BNE      |L12.160|
000096  1c9b              ADDS     r3,r3,#2              ;467
000098  72a5              STRB     r5,[r4,#0xa]          ;467
00009a  b2d8              UXTB     r0,r3                 ;470
00009c  f7fffffe          BL       bsp_PutKey
                  |L12.160|
0000a0  80e5              STRH     r5,[r4,#6]            ;474
0000a2  7325              STRB     r5,[r4,#0xc]          ;475
0000a4  bd70              POP      {r4-r6,pc}
;;;478    
                          ENDP

0000a6  0000              DCW      0x0000
                  |L12.168|
                          DCD      ||.bss||

                          AREA ||i.bsp_GetKey||, CODE, READONLY, ALIGN=2

                  bsp_GetKey PROC
;;;190    */
;;;191    uint8_t bsp_GetKey(void)
000000  4907              LDR      r1,|L13.32|
;;;192    {
;;;193    	uint8_t ret;
;;;194    
;;;195    	if (s_tKey.Read == s_tKey.Write)
000002  7a8a              LDRB     r2,[r1,#0xa]  ; s_tKey
000004  7ac8              LDRB     r0,[r1,#0xb]  ; s_tKey
000006  4282              CMP      r2,r0
000008  d101              BNE      |L13.14|
;;;196    	{
;;;197    		return KEY_NONE;
00000a  2000              MOVS     r0,#0
                  |L13.12|
;;;198    	}
;;;199    	else
;;;200    	{
;;;201    		ret = s_tKey.Buf[s_tKey.Read];
;;;202    
;;;203    		if (++s_tKey.Read >= KEY_FIFO_SIZE)
;;;204    		{
;;;205    			s_tKey.Read = 0;
;;;206    		}
;;;207    		return ret;
;;;208    	}
;;;209    }
00000c  4770              BX       lr
                  |L13.14|
00000e  5c88              LDRB     r0,[r1,r2]            ;201
000010  1c52              ADDS     r2,r2,#1              ;201
000012  b2d2              UXTB     r2,r2                 ;203
000014  728a              STRB     r2,[r1,#0xa]          ;203
000016  2a0a              CMP      r2,#0xa               ;203
000018  d3f8              BCC      |L13.12|
00001a  2200              MOVS     r2,#0                 ;205
00001c  728a              STRB     r2,[r1,#0xa]          ;205
00001e  4770              BX       lr
;;;210    
                          ENDP

                  |L13.32|
                          DCD      ||.bss||+0xa0

                          AREA ||i.bsp_GetKey2||, CODE, READONLY, ALIGN=2

                  bsp_GetKey2 PROC
;;;218    */
;;;219    uint8_t bsp_GetKey2(void)
000000  4907              LDR      r1,|L14.32|
;;;220    {
;;;221    	uint8_t ret;
;;;222    
;;;223    	if (s_tKey.Read2 == s_tKey.Write)
000002  7b0a              LDRB     r2,[r1,#0xc]  ; s_tKey
000004  7ac8              LDRB     r0,[r1,#0xb]  ; s_tKey
000006  4282              CMP      r2,r0
000008  d101              BNE      |L14.14|
;;;224    	{
;;;225    		return KEY_NONE;
00000a  2000              MOVS     r0,#0
                  |L14.12|
;;;226    	}
;;;227    	else
;;;228    	{
;;;229    		ret = s_tKey.Buf[s_tKey.Read2];
;;;230    
;;;231    		if (++s_tKey.Read2 >= KEY_FIFO_SIZE)
;;;232    		{
;;;233    			s_tKey.Read2 = 0;
;;;234    		}
;;;235    		return ret;
;;;236    	}
;;;237    }
00000c  4770              BX       lr
                  |L14.14|
00000e  5c88              LDRB     r0,[r1,r2]            ;229
000010  1c52              ADDS     r2,r2,#1              ;229
000012  b2d2              UXTB     r2,r2                 ;231
000014  730a              STRB     r2,[r1,#0xc]          ;231
000016  2a0a              CMP      r2,#0xa               ;231
000018  d3f8              BCC      |L14.12|
00001a  2200              MOVS     r2,#0                 ;233
00001c  730a              STRB     r2,[r1,#0xc]          ;233
00001e  4770              BX       lr
;;;238    
                          ENDP

                  |L14.32|
                          DCD      ||.bss||+0xa0

                          AREA ||i.bsp_GetKeyState||, CODE, READONLY, ALIGN=2

                  bsp_GetKeyState PROC
;;;246    */
;;;247    uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID)
000000  4902              LDR      r1,|L15.12|
;;;248    {
;;;249    	return s_tBtn[_ucKeyID].State;
000002  eb011000          ADD      r0,r1,r0,LSL #4
000006  7a80              LDRB     r0,[r0,#0xa]
;;;250    }
000008  4770              BX       lr
;;;251    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      ||.bss||

                          AREA ||i.bsp_InitKey||, CODE, READONLY, ALIGN=1

                  bsp_InitKey PROC
;;;158    */
;;;159    void bsp_InitKey(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161    	bsp_InitKeyVar();		/* 初始化按键变量 */
000002  f7fffffe          BL       bsp_InitKeyVar
;;;162    	bsp_InitKeyHard();		/* 初始化按键硬件 */
000006  e8bd4010          POP      {r4,lr}
00000a  f7ffbffe          B.W      bsp_InitKeyHard
;;;163    }
;;;164    
                          ENDP


                          AREA ||i.bsp_InitKeyHard||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyHard PROC
;;;290    */
;;;291    static void bsp_InitKeyHard(void)
000000  b538              PUSH     {r3-r5,lr}
;;;292    {
;;;293    	GPIO_InitTypeDef GPIO_InitStructure;
;;;294    
;;;295    	/* 第1步：打开GPIO时钟 */
;;;296    	RCC_APB2PeriphClockCmd(RCC_ALL_KEY, ENABLE);
000002  2101              MOVS     r1,#1
000004  f44f709a          MOV      r0,#0x134
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;297    
;;;298    	/* 第2步：配置所有的按键GPIO为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;299    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000c  2003              MOVS     r0,#3
00000e  f88d0002          STRB     r0,[sp,#2]
;;;300    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;	/* 输入浮空模式 */
000012  2004              MOVS     r0,#4
000014  f88d0003          STRB     r0,[sp,#3]
;;;301    	
;;;302    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K1;
000018  02c4              LSLS     r4,r0,#11
00001a  f8ad4000          STRH     r4,[sp,#0]
;;;303    	GPIO_Init(GPIO_PORT_K1, &GPIO_InitStructure);
00001e  4669              MOV      r1,sp
000020  481a              LDR      r0,|L17.140|
000022  f7fffffe          BL       GPIO_Init
;;;304    
;;;305    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K2;
000026  2001              MOVS     r0,#1
000028  f8ad0000          STRH     r0,[sp,#0]
;;;306    	GPIO_Init(GPIO_PORT_K2, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  4818              LDR      r0,|L17.144|
000030  f7fffffe          BL       GPIO_Init
;;;307    
;;;308    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K3;
000034  1160              ASRS     r0,r4,#5
;;;309    	GPIO_Init(GPIO_PORT_K3, &GPIO_InitStructure);
000036  4d17              LDR      r5,|L17.148|
000038  f8ad0000          STRH     r0,[sp,#0]            ;308
00003c  4669              MOV      r1,sp
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       GPIO_Init
;;;310    
;;;311    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K4;
000044  00a0              LSLS     r0,r4,#2
000046  f8ad0000          STRH     r0,[sp,#0]
;;;312    	GPIO_Init(GPIO_PORT_K4, &GPIO_InitStructure);
00004a  4669              MOV      r1,sp
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       GPIO_Init
;;;313    
;;;314    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K5;
000052  2008              MOVS     r0,#8
000054  f8ad0000          STRH     r0,[sp,#0]
;;;315    	GPIO_Init(GPIO_PORT_K5, &GPIO_InitStructure);
000058  4669              MOV      r1,sp
00005a  480f              LDR      r0,|L17.152|
00005c  f7fffffe          BL       GPIO_Init
;;;316    
;;;317    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K6;
000060  0060              LSLS     r0,r4,#1
000062  f8ad0000          STRH     r0,[sp,#0]
;;;318    	GPIO_Init(GPIO_PORT_K6, &GPIO_InitStructure);
000066  4669              MOV      r1,sp
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       GPIO_Init
;;;319    
;;;320    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K7;
00006e  f8ad4000          STRH     r4,[sp,#0]
;;;321    	GPIO_Init(GPIO_PORT_K7, &GPIO_InitStructure);
000072  4669              MOV      r1,sp
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       GPIO_Init
;;;322    
;;;323    	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_K8;
00007a  2080              MOVS     r0,#0x80
00007c  f8ad0000          STRH     r0,[sp,#0]
;;;324    	GPIO_Init(GPIO_PORT_K8, &GPIO_InitStructure);
000080  4669              MOV      r1,sp
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       GPIO_Init
;;;325    }
000088  bd38              POP      {r3-r5,pc}
;;;326    
                          ENDP

00008a  0000              DCW      0x0000
                  |L17.140|
                          DCD      0x40011000
                  |L17.144|
                          DCD      0x40010800
                  |L17.148|
                          DCD      0x40012000
                  |L17.152|
                          DCD      0x40011400

                          AREA ||i.bsp_InitKeyVar||, CODE, READONLY, ALIGN=2

                  bsp_InitKeyVar PROC
;;;334    */
;;;335    static void bsp_InitKeyVar(void)
000000  b530              PUSH     {r4,r5,lr}
;;;336    {
;;;337    	uint8_t i;
;;;338    
;;;339    	/* 对按键FIFO读写指针清零 */
;;;340    	s_tKey.Read = 0;
000002  481e              LDR      r0,|L18.124|
000004  2100              MOVS     r1,#0
;;;341    	s_tKey.Write = 0;
;;;342    	s_tKey.Read2 = 0;
;;;343    
;;;344    	/* 给每个按键结构体成员变量赋一组缺省值 */
;;;345    	for (i = 0; i < KEY_COUNT; i++)
;;;346    	{
;;;347    		s_tBtn[i].LongTime = KEY_LONG_TIME;			/* 长按时间 0 表示不检测长按键事件 */
000006  2364              MOVS     r3,#0x64
000008  7281              STRB     r1,[r0,#0xa]          ;340
00000a  72c1              STRB     r1,[r0,#0xb]          ;341
00000c  7301              STRB     r1,[r0,#0xc]          ;342
00000e  38a0              SUBS     r0,r0,#0xa0
000010  460a              MOV      r2,r1                 ;345
;;;348    		s_tBtn[i].Count = KEY_FILTER_TIME / 2;		/* 计数器设置为滤波时间的一半 */
000012  2502              MOVS     r5,#2
                  |L18.20|
000014  eb001402          ADD      r4,r0,r2,LSL #4       ;347
;;;349    		s_tBtn[i].State = 0;							/* 按键缺省状态，0为未按下 */
;;;350    		//s_tBtn[i].KeyCodeDown = 3 * i + 1;				/* 按键按下的键值代码 */
;;;351    		//s_tBtn[i].KeyCodeUp   = 3 * i + 2;				/* 按键弹起的键值代码 */
;;;352    		//s_tBtn[i].KeyCodeLong = 3 * i + 3;				/* 按键被持续按下的键值代码 */
;;;353    		s_tBtn[i].RepeatSpeed = 0;						/* 按键连发的速度，0表示不支持连发 */
;;;354    		s_tBtn[i].RepeatCount = 0;						/* 连发计数器 */
000018  1c52              ADDS     r2,r2,#1
00001a  8123              STRH     r3,[r4,#8]            ;347
00001c  7125              STRB     r5,[r4,#4]            ;348
00001e  72a1              STRB     r1,[r4,#0xa]          ;349
000020  72e1              STRB     r1,[r4,#0xb]          ;353
000022  b2d2              UXTB     r2,r2                 ;345
000024  7321              STRB     r1,[r4,#0xc]
000026  2a0a              CMP      r2,#0xa               ;345
000028  d3f4              BCC      |L18.20|
;;;355    	}
;;;356    
;;;357    	/* 如果需要单独更改某个按键的参数，可以在此单独重新赋值 */
;;;358    	/* 比如，我们希望按键1按下超过1秒后，自动重发相同键值 */
;;;359    	s_tBtn[KID_JOY_U].LongTime = 100;
00002a  8703              STRH     r3,[r0,#0x38]
;;;360    	s_tBtn[KID_JOY_U].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
00002c  2105              MOVS     r1,#5
00002e  f880103b          STRB     r1,[r0,#0x3b]
;;;361    
;;;362    	s_tBtn[KID_JOY_D].LongTime = 100;
000032  f8a03048          STRH     r3,[r0,#0x48]
;;;363    	s_tBtn[KID_JOY_D].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
000036  f880104b          STRB     r1,[r0,#0x4b]
;;;364    
;;;365    	s_tBtn[KID_JOY_L].LongTime = 100;
00003a  f8a03058          STRH     r3,[r0,#0x58]
;;;366    	s_tBtn[KID_JOY_L].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
00003e  f880105b          STRB     r1,[r0,#0x5b]
;;;367    
;;;368    	s_tBtn[KID_JOY_R].LongTime = 100;
000042  f8a03068          STRH     r3,[r0,#0x68]
;;;369    	s_tBtn[KID_JOY_R].RepeatSpeed = 5;	/* 每隔50ms自动发送键值 */
000046  f880106b          STRB     r1,[r0,#0x6b]
;;;370    
;;;371    	/* 判断按键按下的函数 */
;;;372    	s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
00004a  490d              LDR      r1,|L18.128|
00004c  f8401b2c          STR      r1,[r0],#0x2c  ; s_tBtn
;;;373    	s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
000050  490c              LDR      r1,|L18.132|
000052  f8401c1c          STR      r1,[r0,#-0x1c]  ; s_tBtn
;;;374    	s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
000056  490c              LDR      r1,|L18.136|
000058  f8401c0c          STR      r1,[r0,#-0xc]  ; s_tBtn
;;;375    	s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
00005c  490b              LDR      r1,|L18.140|
;;;376    	s_tBtn[4].IsKeyDownFunc = IsKeyDown5;
00005e  6041              STR      r1,[r0,#4]  ; s_tBtn
000060  490b              LDR      r1,|L18.144|
;;;377    	s_tBtn[5].IsKeyDownFunc = IsKeyDown6;
000062  6141              STR      r1,[r0,#0x14]  ; s_tBtn
000064  490b              LDR      r1,|L18.148|
;;;378    	s_tBtn[6].IsKeyDownFunc = IsKeyDown7;
000066  6241              STR      r1,[r0,#0x24]  ; s_tBtn
000068  490b              LDR      r1,|L18.152|
;;;379    	s_tBtn[7].IsKeyDownFunc = IsKeyDown8;
00006a  6341              STR      r1,[r0,#0x34]  ; s_tBtn
00006c  490b              LDR      r1,|L18.156|
;;;380    
;;;381    	/* 组合键 */
;;;382    	s_tBtn[8].IsKeyDownFunc = IsKeyDown9;
00006e  6441              STR      r1,[r0,#0x44]  ; s_tBtn
000070  490b              LDR      r1,|L18.160|
;;;383    	s_tBtn[9].IsKeyDownFunc = IsKeyDown10;
000072  6541              STR      r1,[r0,#0x54]  ; s_tBtn
000074  490b              LDR      r1,|L18.164|
000076  6641              STR      r1,[r0,#0x64]  ; s_tBtn
;;;384    }
000078  bd30              POP      {r4,r5,pc}
;;;385    
                          ENDP

00007a  0000              DCW      0x0000
                  |L18.124|
                          DCD      ||.bss||+0xa0
                  |L18.128|
                          DCD      IsKeyDown1
                  |L18.132|
                          DCD      IsKeyDown2
                  |L18.136|
                          DCD      IsKeyDown3
                  |L18.140|
                          DCD      IsKeyDown4
                  |L18.144|
                          DCD      IsKeyDown5
                  |L18.148|
                          DCD      IsKeyDown6
                  |L18.152|
                          DCD      IsKeyDown7
                  |L18.156|
                          DCD      IsKeyDown8
                  |L18.160|
                          DCD      IsKeyDown9
                  |L18.164|
                          DCD      IsKeyDown10

                          AREA ||i.bsp_KeyScan||, CODE, READONLY, ALIGN=1

                  bsp_KeyScan PROC
;;;486    */
;;;487    void bsp_KeyScan(void)
000000  b510              PUSH     {r4,lr}
;;;488    {
;;;489    	uint8_t i;
;;;490    
;;;491    	for (i = 0; i < KEY_COUNT; i++)
000002  2400              MOVS     r4,#0
                  |L19.4|
;;;492    	{
;;;493    		bsp_DetectKey(i);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       bsp_DetectKey
00000a  1c64              ADDS     r4,r4,#1
00000c  b2e4              UXTB     r4,r4                 ;491
00000e  2c0a              CMP      r4,#0xa               ;491
000010  d3f8              BCC      |L19.4|
;;;494    	}
;;;495    }
000012  bd10              POP      {r4,pc}
;;;496    
                          ENDP


                          AREA ||i.bsp_PutKey||, CODE, READONLY, ALIGN=2

                  bsp_PutKey PROC
;;;172    */
;;;173    void bsp_PutKey(uint8_t _KeyCode)
000000  4905              LDR      r1,|L20.24|
;;;174    {
;;;175    	s_tKey.Buf[s_tKey.Write] = _KeyCode;
000002  7aca              LDRB     r2,[r1,#0xb]  ; s_tKey
000004  5488              STRB     r0,[r1,r2]
;;;176    
;;;177    	if (++s_tKey.Write  >= KEY_FIFO_SIZE)
000006  7ac8              LDRB     r0,[r1,#0xb]  ; s_tKey
000008  1c40              ADDS     r0,r0,#1
00000a  b2c0              UXTB     r0,r0
00000c  72c8              STRB     r0,[r1,#0xb]
00000e  280a              CMP      r0,#0xa
000010  d301              BCC      |L20.22|
;;;178    	{
;;;179    		s_tKey.Write = 0;
000012  2000              MOVS     r0,#0
000014  72c8              STRB     r0,[r1,#0xb]
                  |L20.22|
;;;180    	}
;;;181    }
000016  4770              BX       lr
;;;182    
                          ENDP

                  |L20.24|
                          DCD      ||.bss||+0xa0

                          AREA ||i.bsp_SetKeyParam||, CODE, READONLY, ALIGN=2

                  bsp_SetKeyParam PROC
;;;261    */
;;;262    void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t  _RepeatSpeed)
000000  4b03              LDR      r3,|L21.16|
;;;263    {
;;;264    	s_tBtn[_ucKeyID].LongTime = _LongTime;			/* 长按时间 0 表示不检测长按键事件 */
000002  eb031000          ADD      r0,r3,r0,LSL #4
000006  8101              STRH     r1,[r0,#8]
;;;265    	s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed;			/* 按键连发的速度，0表示不支持连发 */
000008  72c2              STRB     r2,[r0,#0xb]
;;;266    	s_tBtn[_ucKeyID].RepeatCount = 0;						/* 连发计数器 */
00000a  2100              MOVS     r1,#0
00000c  7301              STRB     r1,[r0,#0xc]
;;;267    }
00000e  4770              BX       lr
;;;268    
                          ENDP

                  |L21.16|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tBtn
                          %        160
                  s_tKey
                          %        13

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_key.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_key_c_dc6aca1d____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_key_c_dc6aca1d____REVSH|
#line 128
|__asm___9_bsp_key_c_dc6aca1d____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
